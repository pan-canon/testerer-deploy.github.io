{"version":3,"file":"src_managers_ChatScenarioManager_js.110f3ee6e1ef576800e4.js","mappings":"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","sources":["webpack://testerer-deploy.github.io/./src/managers/ChatScenarioManager.js"],"sourcesContent":["import { BASE_PATH } from '../config/paths.js';\nimport { StateManager } from './StateManager.js';\n\nexport class ChatScenarioManager {\n  /**\n   * ChatScenarioManager is responsible for managing the dialogue flow of the chat.\n   * It loads dialogue stages from a configuration file and advances the conversation\n   * based on user selections. All dialogue texts (both messages and options) are expected\n   * to be localization keys, which are converted to localized strings by ChatManager.\n   *\n   * With the new conversation independence functionality, the dialogue state can be reset\n   * independently via ChatManager's restartConversation() method.\n   *\n   * @param {ChatManager} chatManager - An instance of ChatManager that handles the chat UI.\n   * @param {Object} scenarioConfig - A JSON object representing the chat scenario.\n   * Expected format:\n   * {\n   *   \"dialogues\": [\n   *     {\n   *       \"messages\": [\n   *         { \"sender\": \"spirit\", \"text\": \"chat_welcome_message\", \"animateOnBoard\": true }\n   *       ],\n   *       \"options\": [\n   *         { \"text\": \"chat_option_1\", \"nextDialogueIndex\": 1 },\n   *         { \"text\": \"chat_option_2\", \"nextDialogueIndex\": 2 },\n   *         { \"text\": \"chat_option_3\", \"nextDialogueIndex\": 3 }\n   *       ]\n   *     },\n   *     ...\n   *   ]\n   * }\n   */\n  constructor(chatManager, scenarioConfig = null) {\n    this.chatManager = chatManager;\n    this.scenarioConfig = scenarioConfig; // Scenario configuration data\n    this.currentDialogueIndex = 0;\n    // Optional callback when the scenario ends.\n    this.onScenarioEnd = null;\n  }\n\n  /**\n   * Asynchronously initializes the scenario manager.\n   * If no configuration is provided, it fetches the dialogue configuration from\n   * 'src/config/chatDialogueConfig.json'. This method also restores any saved dialogue\n   * state unless the conversation has been marked as completed.\n   * Previously, if chat messages were already present in the database, dialogue initialization\n   * was skipped, which caused the dialogue options to disappear after a page reload.\n   * This behavior has been corrected: the dialogue state (including options) is restored regardless\n   * of existing messages, provided the conversation is not completed.\n   */\n  async init() {\n    if (!this.scenarioConfig) {\n      try {\n        const response = await fetch(`${BASE_PATH}/src/config/chatDialogueConfig.json`);\n        if (!response.ok) {\n          throw new Error(\"Failed to load dialogue configuration from 'src/config/chatDialogueConfig.json'\");\n        }\n        this.scenarioConfig = await response.json();\n      } catch (error) {\n        console.error(\"Error loading dialogue configuration:\", error);\n        return;\n      }\n    }\n    // Check if the conversation is already completed for this section.\n    if (StateManager.get(this.chatManager.getStateKey('chat_conversation_completed')) === 'true') {\n      console.log(\"Chat conversation already completed, skipping dialogue initialization.\");\n      return;\n    }\n    // Removed check for existing chat messages to ensure dialogue options are always restored.\n    // Restore the current dialogue index if available; default to 0.\n    const savedIndex = StateManager.get(this.chatManager.getStateKey('chat_currentDialogueIndex'));\n    this.currentDialogueIndex = savedIndex !== null ? parseInt(savedIndex, 10) : 0;\n    this.loadCurrentDialogue();\n  }\n\n  /**\n   * Loads the current dialogue configuration and passes the dialogue to ChatManager to render.\n   * The dialogue texts (messages and options) are expected to be localization keys,\n   * and ChatManager will convert them into localized strings.\n   */\n  loadCurrentDialogue() {\n    if (!this.scenarioConfig || !this.scenarioConfig.dialogues) {\n      console.error(\"Scenario configuration is missing or invalid.\");\n      return;\n    }\n    const dialogue = this.scenarioConfig.dialogues[this.currentDialogueIndex];\n    if (!dialogue) {\n      console.warn(\"No dialogue found at the current index.\");\n      return;\n    }\n    // Render the dialogue. Message saving is handled in ChatManager.loadDialogue().\n    this.chatManager.loadDialogue(dialogue);\n  }\n\n  /**\n   * Advances the dialogue based on the user's selected option.\n   *\n   * If the selected option defines a nextDialogueIndex, the conversation advances accordingly.\n   * Otherwise, the conversation is marked as completed and the saved dialogue index is removed.\n   *\n   * @param {number} optionIndex - The index of the chosen option.\n   */\n  advanceDialogue(optionIndex) {\n    const currentDialogue = this.scenarioConfig.dialogues[this.currentDialogueIndex];\n    if (\n      !currentDialogue ||\n      !Array.isArray(currentDialogue.options) ||\n      currentDialogue.options.length <= optionIndex\n    ) {\n      console.error(\"Invalid option index.\");\n      return;\n    }\n    const selectedOption = currentDialogue.options[optionIndex];\n    if (selectedOption && typeof selectedOption.onSelect === \"function\") {\n      selectedOption.onSelect();\n    }\n    if (selectedOption && typeof selectedOption.nextDialogueIndex === \"number\") {\n      this.currentDialogueIndex = selectedOption.nextDialogueIndex;\n      // Persist the updated dialogue index for this section.\n      StateManager.set(this.chatManager.getStateKey('chat_currentDialogueIndex'), this.currentDialogueIndex);\n      this.loadCurrentDialogue();\n    } else {\n      console.log(\"No next dialogue defined; scenario may have ended.\");\n      // Mark conversation as completed and remove the saved dialogue index for this section.\n      StateManager.set(this.chatManager.getStateKey('chat_conversation_completed'), 'true');\n      StateManager.remove(this.chatManager.getStateKey('chat_currentDialogueIndex'));\n      // Remove the 'chat_started' flag so that conversation is not auto-resumed on reload.\n      StateManager.remove(this.chatManager.getStateKey('chat_started'));\n      if (typeof this.onScenarioEnd === \"function\") {\n        this.onScenarioEnd();\n      }\n    }\n  }\n\n  /**\n   * Sets a new scenario configuration and resets the dialogue index.\n   * This facilitates conversation independence by allowing a fresh dialogue session.\n   *\n   * @param {Object} scenarioConfig - The new scenario configuration.\n   */\n  setScenario(scenarioConfig) {\n    this.scenarioConfig = scenarioConfig;\n    this.currentDialogueIndex = 0;\n    StateManager.set(this.chatManager.getStateKey('chat_currentDialogueIndex'), this.currentDialogueIndex);\n    this.loadCurrentDialogue();\n  }\n\n  /**\n   * Registers a callback function to be executed when the dialogue scenario ends.\n   *\n   * @param {Function} callback - The callback function.\n   */\n  setOnScenarioEnd(callback) {\n    if (typeof callback === \"function\") {\n      this.onScenarioEnd = callback;\n    }\n  }\n}"],"names":["BASE_PATH","StateManager","ChatScenarioManager","constructor","chatManager","scenarioConfig","arguments","length","undefined","currentDialogueIndex","onScenarioEnd","init","response","fetch","ok","Error","json","error","console","get","getStateKey","log","savedIndex","parseInt","loadCurrentDialogue","dialogues","dialogue","warn","loadDialogue","advanceDialogue","optionIndex","currentDialogue","Array","isArray","options","selectedOption","onSelect","nextDialogueIndex","set","remove","setScenario","setOnScenarioEnd","callback"],"sourceRoot":""}