{"version":3,"file":"triads/triad-post_mirror_event.js","mappings":"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","sources":["webpack://testerer-deploy.github.io/./build/triads/triad-post_mirror_event.js","webpack://testerer-deploy.github.io/./src/events/BaseEvent.js","webpack://testerer-deploy.github.io/./src/events/PostMirrorEvent.js","webpack://testerer-deploy.github.io/./src/events/PostRepeatingEvent.js"],"sourcesContent":["import { PostMirrorEvent } from 'events/PostMirrorEvent.js';\nimport { PostRepeatingEvent } from 'events/PostRepeatingEvent.js';\n\nexport {\n  PostMirrorEvent,\n  PostRepeatingEvent,\n};\n","import { ErrorManager } from '../managers/ErrorManager.js';\n\n/**\n * BaseEvent - Base class for events, providing common functionality\n * for activation and logging in the diary.\n * This class is used in an Observer Pattern where each event notifies\n * subscribed components (e.g., diary UI) about changes.\n */\nexport class BaseEvent {\n  /**\n   * Constructor for the BaseEvent.\n   * @param {EventManager} eventManager - Instance of the event manager responsible for diary operations.\n   *\n   * @property {string} key - Unique identifier for the event, which should be set by subclasses.\n   */\n  constructor(eventManager) {\n    /** @type {EventManager} */\n    this.eventManager = eventManager;\n    // Event key; should be overridden in subclasses.\n    this.key = \"\";\n  }\n\n  /**\n   * activate - Activates the event.\n   * If an event with the given key has not been logged yet, the event is logged via the eventManager.\n   * This method handles logging and notification without triggering subsequent actions.\n   *\n   * NOTE: No direct UI manipulations should be placed here â€” any UI updates\n   *       (e.g. enabling/disabling buttons) happen in specialized managers.\n   *\n   * @returns {Promise<void>} Asynchronous execution.\n   */\n  async activate() {\n    try {\n      // Check if the event with this key has not been logged yet.\n      if (!this.eventManager.isEventLogged(this.key)) {\n        console.log(`Activating event: ${this.key}`);\n        // Log the event in the diary (as a user post, without ghost flag).\n        await this.eventManager.addDiaryEntry(this.key);\n      }\n    } catch (error) {\n      // Delegate error logging and user notification.\n      ErrorManager.logError(error, \"BaseEvent.activate\");\n      ErrorManager.showError(\"An error occurred during event activation.\");\n    }\n  }\n\n  /**\n   * addDiaryEntry - Convenience method to add a diary entry.\n   * Delegates the addition to the eventManager.\n   *\n   * @param {string} text - The text of the entry to be added to the diary.\n   * @param {boolean} [isGhostPost=false] - Flag indicating if this is a ghost post.\n   * @returns {Promise<void>} Asynchronous execution.\n   */\n  async addDiaryEntry(text, isGhostPost = false) {\n    try {\n      await this.eventManager.addDiaryEntry(text, isGhostPost);\n    } catch (error) {\n      ErrorManager.logError(error, \"BaseEvent.addDiaryEntry\");\n      ErrorManager.showError(\"An error occurred while adding a diary entry.\");\n    }\n  }\n}","import { BaseEvent } from './BaseEvent.js';\nimport { StateManager } from '../managers/StateManager.js';\nimport { ErrorManager } from '../managers/ErrorManager.js';\n\n/**\n * PostMirrorEvent\n * \n * This event publishes a ghost post and signals that the mirror quest cycle has ended.\n * It updates the UI via ViewManager without directly setting quest-specific flags.\n *\n * NOTE: This event is part of the sequential chain managed by GhostManager.\n * It only performs its task and then dispatches a \"gameEventCompleted\" event.\n */\nexport class PostMirrorEvent extends BaseEvent {\n  /**\n   * @param {EventManager} eventManager - Manager handling diary operations.\n   * @param {App} appInstance - Reference to the main application instance.\n   */\n  constructor(eventManager, appInstance) {\n    super(eventManager);\n    this.app = appInstance;\n    this.key = \"post_mirror_event\";\n  }\n\n  async activate() {\n    if (this.eventManager.isEventLogged(this.key)) {\n      console.log(`[PostMirrorEvent] Event '${this.key}' is already logged, skipping activation.`);\n      return;\n    }\n\n    console.log(`[PostMirrorEvent] Activating event '${this.key}'.`);\n    await this.addDiaryEntry(this.key, true);\n\n    // Instead of directly setting mirrorQuestReady or isRepeatingCycle,\n    // signal that the mirror quest cycle has completed by enabling the Post button \n    // and triggering the mirror effect. The universal active quest state is managed elsewhere.\n    if (this.app.viewManager && typeof this.app.viewManager.setPostButtonEnabled === \"function\") {\n      this.app.viewManager.setPostButtonEnabled(true);\n    }\n\n    if (this.app.visualEffectsManager && typeof this.app.visualEffectsManager.triggerMirrorEffect === \"function\") {\n      this.app.visualEffectsManager.triggerMirrorEffect();\n    }\n\n    console.log(\"[PostMirrorEvent] Mirror quest cycle ended; waiting for user action to trigger the next quest.\");\n    \n    // Dispatch an event to signal that this event has completed.\n    document.dispatchEvent(new CustomEvent(\"gameEventCompleted\", { detail: this.key }));\n  }\n}","import { BaseEvent } from './BaseEvent.js';\nimport { StateManager } from '../managers/StateManager.js';\nimport { ErrorManager } from '../managers/ErrorManager.js';\n\n/**\n * PostRepeatingEvent\n * \n * This event finalizes the mirror quest cycle and prepares the system for the repeating quest cycle.\n * It logs a ghost post and, if the current ghost is not finished, enables the Post button and triggers the mirror effect.\n * It does not directly set quest-specific flags; these are managed via the universal state.\n *\n * NOTE: This event does not automatically trigger quest activation;\n * it simply performs its task and dispatches a \"gameEventCompleted\" event.\n */\nexport class PostRepeatingEvent extends BaseEvent {\n  /**\n   * @param {EventManager} eventManager - Manager handling diary operations.\n   * @param {App} appInstance - Reference to the main application instance.\n   */\n  constructor(eventManager, appInstance) {\n    super(eventManager);\n    this.app = appInstance;\n    // Base key for post repeating event.\n    this.key = \"post_repeating_event\";\n  }\n\n  /**\n   * activate - Activates the post repeating event.\n   * Accepts an optional dynamicKey to generate a unique event id (e.g., \"post_repeating_event_stage_2\").\n   *\n   * @param {string} [dynamicKey] - Optional unique event key.\n   */\n  async activate(dynamicKey) {\n    const eventKey = dynamicKey || this.key;\n    if (this.eventManager.isEventLogged(eventKey)) {\n      console.log(`[PostRepeatingEvent] Event '${eventKey}' is already logged, skipping activation.`);\n      return;\n    }\n    console.log(`[PostRepeatingEvent] Activating event '${eventKey}'.`);\n\n    await this.addDiaryEntry(eventKey, true);\n\n    // Check if the current ghost is finished.\n    const ghost = this.app.ghostManager.getCurrentGhost();\n    if (ghost && ghost.isFinished) {\n      console.log(\"[PostRepeatingEvent] Ghost is finished; ready to dispatch event completion.\");\n      // No additional processing is needed if the ghost is finished.\n    } else {\n      // Instead of setting a mirrorQuestReady flag,\n      // simply enable the Post button and trigger the mirror effect.\n      if (this.app.viewManager && typeof this.app.viewManager.setPostButtonEnabled === \"function\") {\n        this.app.viewManager.setPostButtonEnabled(true);\n      }\n      \n      if (this.app.visualEffectsManager && typeof this.app.visualEffectsManager.triggerMirrorEffect === \"function\") {\n        this.app.visualEffectsManager.triggerMirrorEffect();\n      }\n      console.log(\"[PostRepeatingEvent] Repeating quest cycle ended; waiting for user action.\");\n    }\n\n    // Dispatch an event to signal completion of this event.\n    document.dispatchEvent(new CustomEvent(\"gameEventCompleted\", { detail: eventKey }));\n  }\n}"],"names":["PostMirrorEvent","PostRepeatingEvent","ErrorManager","BaseEvent","constructor","eventManager","key","activate","isEventLogged","console","log","addDiaryEntry","error","logError","showError","text","isGhostPost","StateManager","appInstance","app","viewManager","setPostButtonEnabled","visualEffectsManager","triggerMirrorEffect","document","dispatchEvent","CustomEvent","detail","dynamicKey","eventKey","ghost","ghostManager","getCurrentGhost","isFinished"],"sourceRoot":""}