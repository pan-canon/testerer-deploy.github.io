import { WelcomeEvent } from './events/welcomeEvent.js';
import { FinalEvent } from './events/finalEvent.js';
import { PostMirrorEvent } from './events/postMirrorEvent.js';
import { PostRepeatingEvent } from './events/postRepeatingEvent.js';

/**
 * GameEventManager ‚Äì –∫–ª–∞—Å—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ ‚Äú–∫–æ—Ä–æ—Ç–∫–∏–µ‚Äù (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ) —Å–æ–±—ã—Ç–∏—è.
 * –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –±–æ–ª—å—à–∏—Ö –∫–≤–µ—Å—Ç–æ–≤ (MirrorQuest, RepeatingQuest, FinalQuest),
 * —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è –ª–∏—à—å –≤—ã–∑—ã–≤–∞—é—Ç –∑–∞–ø—É—Å–∫ –Ω—É–∂–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞ –∏–ª–∏ –¥–µ–ª–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç.
 */
export class GameEventManager {
  constructor(eventManager, appInstance, languageManager) {
    this.eventManager    = eventManager;
    this.app             = appInstance;
    this.languageManager = languageManager;
    
    // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π (–≤–æ–∑–º–æ–∂–Ω–∞ –ª—é–±–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ—Ä—è–¥–∫–∞)
    this.events = [
      new WelcomeEvent(this.eventManager, this.app, this.languageManager),
      new PostMirrorEvent(this.eventManager, this.app),
      new PostRepeatingEvent(this.eventManager, this.app),
      new FinalEvent(this.eventManager, this.app, this.languageManager)
    ];
    
    this.currentEventIndex = 0;
  }

  async activateEvent(key) {
    const event = this.events.find(e => e.key === key);
    if (event) {
      await event.activate();
      this.currentEventIndex++;
      if (this.currentEventIndex < this.events.length) {
        await this.activateNextEvent();
      }
    } else {
      console.warn(`[GameEventManager] –°–æ–±—ã—Ç–∏–µ "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ.`);
    }
  }

  async activateNextEvent() {
    const nextEvent = this.events[this.currentEventIndex];
    if (nextEvent) {
      await nextEvent.activate();
      this.currentEventIndex++;
    }
  }

  // –ü—Ä–∏–º–µ—Ä—ã –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  async startQuest() {
    const ghost = this.app.ghostManager.getCurrentGhost();
    const questKey = `ghost_${ghost.id}_quest`;
    const event = this.events.find(e => e.key === questKey);
    if (event) {
      await this.activateEvent(questKey);
    } else {
      // –õ–∏–±–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–µ—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
      await this.app.questManager.activateQuest(questKey);
    }
    if (this.currentEventIndex < this.events.length) {
      await this.activateNextEvent();
    }
  }

  async startMirrorQuest() {
    await this.activateEvent('mirror_quest');
    console.log("ü™û Mirror Quest started (event).");
  }
}