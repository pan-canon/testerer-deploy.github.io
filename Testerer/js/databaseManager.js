export class DatabaseManager {
  constructor() {
    // –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQL.Database) –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–¥–µ—Å—å.
    this.db = null;
    // Promise, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    this.initDatabasePromise = this.initDatabase();
  }

  /**
   * initDatabase ‚Äì –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
   * –ï—Å–ª–∏ –±–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ—ë; –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å –Ω—É–∂–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏.
   */
  async initDatabase() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º SQL.js, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—é locateFile –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤.
    const SQL = await initSqlJs({
      locateFile: file => `js/${file}`
    });
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–∏ –±–∞–∑–∞ –≤ localStorage –ø–æ–¥ –∫–ª—é—á–æ–º "diaryDB"
    const savedDb = localStorage.getItem("diaryDB");
    if (savedDb) {
      // –ï—Å–ª–∏ –±–∞–∑–∞ –Ω–∞–π–¥–µ–Ω–∞, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º base64-—Å—Ç—Ä–æ–∫—É –≤ Uint8Array
      const byteStr = atob(savedDb);
      const bytes = new Uint8Array(byteStr.length);
      for (let i = 0; i < byteStr.length; i++) {
        bytes[i] = byteStr.charCodeAt(i);
      }
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–∞–π—Ç–æ–≤
      this.db = new SQL.Database(bytes);
    } else {
      // –ï—Å–ª–∏ –±–∞–∑—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      this.db = new SQL.Database();
      // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã: diary, apartment_plan –∏ quest_progress
      this.db.run(`
        CREATE TABLE IF NOT EXISTS diary (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          entry TEXT,
          timestamp TEXT
        );
        CREATE TABLE IF NOT EXISTS apartment_plan (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          floor_number INTEGER,
          room_data TEXT
        );
        CREATE TABLE IF NOT EXISTS quest_progress (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          quest_key TEXT,
          status TEXT
        );
      `);
    }
    console.log("üìñ Database initialized!");
  }

  /**
   * saveDatabase ‚Äì —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –≤ localStorage.
   */
  saveDatabase() {
    if (!this.db) return;
    // –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –≤ –±–∏–Ω–∞—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
    const binaryData = this.db.export();
    let binaryStr = "";
    for (let i = 0; i < binaryData.length; i++) {
      binaryStr += String.fromCharCode(binaryData[i]);
    }
    // –ö–æ–¥–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ base64 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    const base64 = btoa(binaryStr);
    localStorage.setItem("diaryDB", base64);
  }

  /**
   * addDiaryEntry ‚Äì –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É diary.
   * @param {string} entry - –¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏ (–æ–±—ã—á–Ω–æ JSON‚Äë—Å—Ç—Ä–æ–∫–∞).
   */
  async addDiaryEntry(entry) {
    if (!this.db) {
      console.error("‚ö†Ô∏è Database not initialized!");
      return;
    }
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
    const timestamp = new Date().toISOString();
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É diary
    this.db.run("INSERT INTO diary (entry, timestamp) VALUES (?, ?)", [entry, timestamp]);
    console.log("‚úÖ Entry added:", entry);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏
    this.saveDatabase();
  }

  /**
   * getDiaryEntries ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã diary, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏.
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–ø–∏—Å–µ–π { id, entry, postClass, timestamp }.
   */
  getDiaryEntries() {
    if (!this.db) {
      console.error("‚ö†Ô∏è Database not initialized!");
      return [];
    }
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
    const result = this.db.exec("SELECT * FROM diary ORDER BY timestamp DESC");
    if (result.length > 0) {
      return result[0].values.map(row => {
        let parsed;
        try {
          // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ–ª–µ –∑–∞–ø–∏—Å–∏ –∫–∞–∫ JSON
          parsed = JSON.parse(row[1]);
        } catch (e) {
          // –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          parsed = { entry: row[1], postClass: "user-post" };
        }
        return { id: row[0], ...parsed, timestamp: row[2] };
      });
    }
    return [];
  }

  /**
   * addQuestProgress ‚Äì –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–≤–µ—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É quest_progress.
   * @param {string} questKey - –ö–ª—é—á –∫–≤–µ—Å—Ç–∞.
   * @param {string} status - –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞.
   */
  addQuestProgress(questKey, status) {
    if (!this.db) {
      console.error("‚ö†Ô∏è Database not initialized!");
      return;
    }
    this.db.run("INSERT INTO quest_progress (quest_key, status) VALUES (?, ?)", [questKey, status]);
    console.log(`‚úÖ Quest progress added: ${questKey} - ${status}`);
    this.saveDatabase();
  }

  /**
   * getQuestProgress ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞.
   * @param {string} questKey - –ö–ª—é—á –∫–≤–µ—Å—Ç–∞.
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ { id, quest_key, status }.
   */
  getQuestProgress(questKey) {
    if (!this.db) {
      console.error("‚ö†Ô∏è Database not initialized!");
      return null;
    }
    const result = this.db.exec("SELECT * FROM quest_progress WHERE quest_key = ?", [questKey]);
    if (result.length > 0) {
      return result[0].values.map(row => ({ id: row[0], quest_key: row[1], status: row[2] }));
    }
    return [];
  }

  /**
   * addApartmentRooms ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç—Ç–∞–∂–∞.
   * @param {number} floor - –Ω–æ–º–µ—Ä —ç—Ç–∞–∂–∞.
   * @param {Array} rooms - –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤, –æ–ø–∏—Å—ã–≤–∞—é—â–∏—Ö –ø–æ–º–µ—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, {floor, startRow, startCol, endRow, endCol, type}).
   */
  addApartmentRooms(floor, rooms) {
    if (!this.db) {
      console.error("‚ö†Ô∏è Database not initialized!");
      return;
    }
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –∫–æ–º–Ω–∞—Ç –≤ JSON-—Å—Ç—Ä–æ–∫—É
    const roomData = JSON.stringify(rooms);
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —ç—Ç–∞–∂–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    this.db.run("DELETE FROM apartment_plan WHERE floor_number = ?", [floor]);
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    this.db.run("INSERT INTO apartment_plan (floor_number, room_data) VALUES (?, ?)", [floor, roomData]);
    console.log(`‚úÖ Apartment plan for floor ${floor} saved.`);
    this.saveDatabase();
  }

  /**
   * getApartmentPlan ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç—Ç–∞–∂–∞.
   * @param {number} floor - –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞.
   * @param {function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö (–ø–ª–∞–Ω).
   */
  getApartmentPlan(floor, callback) {
    if (!this.db) {
      console.error("‚ö†Ô∏è Database not initialized!");
      callback([]);
      return;
    }
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —ç—Ç–∞–∂—É
    const result = this.db.exec("SELECT room_data FROM apartment_plan WHERE floor_number = ? ORDER BY id", [floor]);
    if (result.length > 0) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å (room_data) –∏–∑ JSON, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
      const rooms = result[0].values.map(row => {
        try {
          return JSON.parse(row[0]);
        } catch (e) {
          return row[0];
        }
      });
      callback(rooms);
    } else {
      callback([]);
    }
  }
}