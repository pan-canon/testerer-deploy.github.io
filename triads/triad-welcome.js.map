{"version":3,"file":"triads/triad-welcome.js","mappings":"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","sources":["webpack://testerer-deploy.github.io/./build/triads/triad-welcome.js","webpack://testerer-deploy.github.io/./src/events/BaseEvent.js","webpack://testerer-deploy.github.io/./src/events/PostMirrorEvent.js","webpack://testerer-deploy.github.io/./src/events/WelcomeEvent.js","webpack://testerer-deploy.github.io/./src/quests/BaseMirrorQuest.js"],"sourcesContent":["import { WelcomeEvent } from 'events/WelcomeEvent.js';\nimport { BaseMirrorQuest } from 'quests/BaseMirrorQuest.js';\nimport { PostMirrorEvent } from 'events/PostMirrorEvent.js';\n\nexport {\n  WelcomeEvent,\n  BaseMirrorQuest,\n  PostMirrorEvent,\n};\n","import { ErrorManager } from '../managers/ErrorManager.js';\n\n/**\n * BaseEvent - Base class for events, providing common functionality\n * for activation and logging in the diary.\n * This class is used in an Observer Pattern where each event notifies\n * subscribed components (e.g., diary UI) about changes.\n */\nexport class BaseEvent {\n  /**\n   * Constructor for the BaseEvent.\n   * @param {EventManager} eventManager - Instance of the event manager responsible for diary operations.\n   *\n   * @property {string} key - Unique identifier for the event, which should be set by subclasses.\n   */\n  constructor(eventManager) {\n    /** @type {EventManager} */\n    this.eventManager = eventManager;\n    // Event key; should be overridden in subclasses.\n    this.key = \"\";\n  }\n\n  /**\n   * activate - Activates the event.\n   * If an event with the given key has not been logged yet, the event is logged via the eventManager.\n   * This method handles logging and notification without triggering subsequent actions.\n   *\n   * NOTE: No direct UI manipulations should be placed here — any UI updates\n   *       (e.g. enabling/disabling buttons) happen in specialized managers.\n   *\n   * @returns {Promise<void>} Asynchronous execution.\n   */\n  async activate() {\n    try {\n      // Check if the event with this key has not been logged yet.\n      if (!this.eventManager.isEventLogged(this.key)) {\n        console.log(`Activating event: ${this.key}`);\n        // Log the event in the diary (as a user post, without ghost flag).\n        await this.eventManager.addDiaryEntry(this.key);\n      }\n    } catch (error) {\n      // Delegate error logging and user notification.\n      ErrorManager.logError(error, \"BaseEvent.activate\");\n      ErrorManager.showError(\"An error occurred during event activation.\");\n    }\n  }\n\n  /**\n   * addDiaryEntry - Convenience method to add a diary entry.\n   * Delegates the addition to the eventManager.\n   *\n   * @param {string} text - The text of the entry to be added to the diary.\n   * @param {boolean} [isGhostPost=false] - Flag indicating if this is a ghost post.\n   * @returns {Promise<void>} Asynchronous execution.\n   */\n  async addDiaryEntry(text, isGhostPost = false) {\n    try {\n      await this.eventManager.addDiaryEntry(text, isGhostPost);\n    } catch (error) {\n      ErrorManager.logError(error, \"BaseEvent.addDiaryEntry\");\n      ErrorManager.showError(\"An error occurred while adding a diary entry.\");\n    }\n  }\n}","import { BaseEvent } from './BaseEvent.js';\nimport { StateManager } from '../managers/StateManager.js';\nimport { ErrorManager } from '../managers/ErrorManager.js';\n\n/**\n * PostMirrorEvent\n * \n * This event publishes a ghost post and signals that the mirror quest cycle has ended.\n * It updates the UI via ViewManager without directly setting quest-specific flags.\n *\n * NOTE: This event is part of the sequential chain managed by GhostManager.\n * It only performs its task and then dispatches a \"gameEventCompleted\" event.\n */\nexport class PostMirrorEvent extends BaseEvent {\n  /**\n   * @param {EventManager} eventManager - Manager handling diary operations.\n   * @param {App} appInstance - Reference to the main application instance.\n   */\n  constructor(eventManager, appInstance) {\n    super(eventManager);\n    this.app = appInstance;\n    this.key = \"post_mirror_event\";\n  }\n\n  async activate() {\n    if (this.eventManager.isEventLogged(this.key)) {\n      console.log(`[PostMirrorEvent] Event '${this.key}' is already logged, skipping activation.`);\n      return;\n    }\n\n    console.log(`[PostMirrorEvent] Activating event '${this.key}'.`);\n    await this.addDiaryEntry(this.key, true);\n\n    // Instead of directly setting mirrorQuestReady or isRepeatingCycle,\n    // signal that the mirror quest cycle has completed by enabling the Post button \n    // and triggering the mirror effect. The universal active quest state is managed elsewhere.\n    if (this.app.viewManager && typeof this.app.viewManager.setPostButtonEnabled === \"function\") {\n      this.app.viewManager.setPostButtonEnabled(true);\n    }\n\n    if (this.app.visualEffectsManager && typeof this.app.visualEffectsManager.triggerMirrorEffect === \"function\") {\n      this.app.visualEffectsManager.triggerMirrorEffect();\n    }\n\n    console.log(\"[PostMirrorEvent] Mirror quest cycle ended; waiting for user action to trigger the next quest.\");\n    \n    // Dispatch an event to signal that this event has completed.\n    document.dispatchEvent(new CustomEvent(\"gameEventCompleted\", { detail: this.key }));\n  }\n}","import { BaseEvent } from './BaseEvent.js';\nimport { StateManager } from '../managers/StateManager.js';\nimport { ErrorManager } from '../managers/ErrorManager.js';\n\n/**\n * WelcomeEvent\n * \n * This event is triggered immediately after registration. It logs a welcome message\n * (invitation to approach the mirror) in the diary and enables the \"Post\" button.\n * It uses StateManager to check and update the \"welcomeDone\" flag so that the event\n * is launched only once per registration cycle.\n *\n * NOTE: This event is part of the sequential chain managed by GhostManager.\n * It only performs its task (publishing a ghost post and setting flags) and then\n * dispatches a \"gameEventCompleted\" event.\n */\nexport class WelcomeEvent extends BaseEvent {\n  /**\n   * @param {EventManager} eventManager - Manager handling diary operations.\n   * @param {App} appInstance - Reference to the main application instance.\n   * @param {LanguageManager} [languageManager] - Optional localization manager.\n   */\n  constructor(eventManager, appInstance, languageManager) {\n    super(eventManager);\n    this.app = appInstance;\n    this.languageManager = languageManager;\n    this.key = \"welcome\";\n  }\n\n  async activate() {\n    // If the welcome event has already been completed, skip activation.\n    if (StateManager.get(StateManager.KEYS.WELCOME_DONE) === \"true\") {\n      console.log(\"Welcome event already completed; skipping activation.\");\n      if (this.app.viewManager && typeof this.app.viewManager.setPostButtonEnabled === \"function\") {\n        this.app.viewManager.setPostButtonEnabled(true);\n      }\n      return;\n    }\n    \n    // If the event is already logged, check the universal active quest key for enabling the Post button.\n    if (this.eventManager.isEventLogged(this.key)) {\n      console.log(`Event '${this.key}' is already logged.`);\n      if (StateManager.get(\"activeQuestKey\") === \"mirror_quest\") {\n        if (this.app.viewManager && typeof this.app.viewManager.setPostButtonEnabled === \"function\") {\n          this.app.viewManager.setPostButtonEnabled(true);\n          console.log(\"Post button enabled based on activeQuestKey 'mirror_quest'.\");\n        }\n      } else {\n        if (this.app.viewManager && typeof this.app.viewManager.setPostButtonEnabled === \"function\") {\n          this.app.viewManager.setPostButtonEnabled(false);\n          console.log(\"Post button remains disabled as activeQuestKey is not set to 'mirror_quest'.\");\n        }\n      }\n      return;\n    }\n\n    // Log the event as a ghost post via the unified method.\n    console.log(`Activating event '${this.key}': Logging invitation to approach the mirror`);\n    await this.addDiaryEntry(this.key, true);\n\n    // Instead of setting \"mirrorQuestReady\", update the universal active quest key.\n    if (this.app.viewManager && typeof this.app.viewManager.setPostButtonEnabled === \"function\") {\n      this.app.viewManager.setPostButtonEnabled(true);\n    }\n    \n    // Trigger the mirror effect if available.\n    if (this.app.visualEffectsManager && typeof this.app.visualEffectsManager.triggerMirrorEffect === \"function\") {\n      this.app.visualEffectsManager.triggerMirrorEffect();\n    }\n\n    // Mark the welcome event as completed.\n    StateManager.set(StateManager.KEYS.WELCOME_DONE, \"true\");\n\n    // Dispatch an event to signal that the welcome event has completed.\n    document.dispatchEvent(new CustomEvent(\"gameEventCompleted\", { detail: this.key }));\n  }\n}","import { BaseEvent } from '../events/BaseEvent.js';\nimport { ImageUtils } from '../utils/ImageUtils.js';\nimport { StateManager } from '../managers/StateManager.js';\nimport { ErrorManager } from '../managers/ErrorManager.js';\n\n/**\n * BaseMirrorQuest – Base class for the mirror quest.\n * Encapsulates the logic for comparing the current frame (canvas → grayscale → compare),\n * managing the check loop, and delegating UI updates to the ViewManager.\n */\nexport class BaseMirrorQuest extends BaseEvent {\n  constructor(eventManager, appInstance, config = {}) {\n    super(eventManager);\n    this.app = appInstance;\n    this.key = config.key || \"mirror_quest\"; // Allows overriding the key.\n    this.doneKey = config.doneKey || \"mirror_done\";\n\n    // UI configuration (identifiers used by ViewManager)\n    this.statusElementId = config.statusElementId || \"mirror-quest-status\";\n    this.shootButtonId = config.shootButtonId || \"btn_shoot\";\n\n    this.checkInterval = null; // For startCheckLoop\n    this.finished = false;\n\n    // Canvas for frame comparison\n    this.tempCanvas = document.createElement(\"canvas\");\n    this.tempCtx = this.tempCanvas.getContext(\"2d\");\n\n    this.registerEvents();\n  }\n\n  /**\n   * registerEvents\n   * If the universal active quest key matches this quest's key,\n   * starts the check loop when the camera becomes ready.\n   */\n  registerEvents() {\n    document.addEventListener('cameraReady', () => {\n      // Instead of checking a specific flag, check the universal \"activeQuestKey\"\n      if (StateManager.getActiveQuestKey() === this.key) {\n        this.startCheckLoop();\n      }\n    });\n  }\n\n  /**\n   * activate\n   * Activates the mirror quest if it is not yet logged and creates an \"active\" quest record in the database.\n   * Note: The universal active quest key is set by the GhostManager/QuestManager.\n   */\n  async activate() {\n    if (!this.eventManager.isEventLogged(this.key)) {\n      console.log(`Activating event: ${this.key}`);\n      // Use the unified diary entry method from BaseEvent.\n      await this.addDiaryEntry(this.key);\n    }\n    console.log(\"[BaseMirrorQuest] Mirror quest activated.\");\n    // Save quest record as active.\n    await this.app.databaseManager.saveQuestRecord({\n      quest_key: this.key,\n      status: \"active\",\n      current_stage: 1,\n      total_stages: 1\n    });\n  }\n\n  /**\n   * startCheckLoop\n   * Displays the mirror quest UI (via ViewManager) and starts a loop that checks \n   * \"compareFrameInternally\" every 2 seconds.\n   */\n  startCheckLoop() {\n    if (this.checkInterval) return; // Already running.\n\n    if (this.app.viewManager && typeof this.app.viewManager.startMirrorQuestUI === 'function') {\n      this.app.viewManager.startMirrorQuestUI({\n        statusElementId: this.statusElementId,\n        shootButtonId: this.shootButtonId,\n        onShoot: () => this.finish() // When user clicks the shoot button, finish the quest.\n      });\n    }\n\n    this.checkInterval = setInterval(async () => {\n      if (!this.app.isCameraOpen) {\n        console.warn(\"[BaseMirrorQuest] Camera is not active - stopping check loop.\");\n        this.stopCheckLoop();\n        return;\n      }\n      const success = await this.checkStatus();\n      if (this.app.viewManager && typeof this.app.viewManager.updateMirrorQuestStatus === 'function') {\n        this.app.viewManager.updateMirrorQuestStatus(success, this.statusElementId, this.shootButtonId);\n      }\n    }, 2000);\n  }\n\n  /**\n   * stopCheckLoop\n   * Clears the interval and hides the quest UI via ViewManager.\n   */\n  stopCheckLoop() {\n    if (this.checkInterval) {\n      clearInterval(this.checkInterval);\n      this.checkInterval = null;\n    }\n    if (this.app.viewManager && typeof this.app.viewManager.stopMirrorQuestUI === 'function') {\n      this.app.viewManager.stopMirrorQuestUI(this.statusElementId);\n    }\n  }\n\n  /**\n   * checkStatus\n   * Uses compareFrameInternally to decide if the user is \"in front of the mirror.\"\n   */\n  async checkStatus() {\n    console.log(\"[BaseMirrorQuest] checkStatus() -> compareFrameInternally()\");\n    return await this.compareFrameInternally();\n  }\n\n  /**\n   * compareFrameInternally\n   * Captures the current camera frame, converts it to grayscale, compares it to the saved selfieData,\n   * and returns a boolean indicating success or failure.\n   */\n  async compareFrameInternally() {\n    if (!this.app.isCameraOpen) {\n      console.warn(\"[BaseMirrorQuest] Camera is not active (app.isCameraOpen false)\");\n      return false;\n    }\n    if (!this.app.selfieData) {\n      console.warn(\"[BaseMirrorQuest] No saved selfie (app.selfieData)\");\n      return false;\n    }\n    const videoEl = this.app.cameraSectionManager?.videoElement;\n    if (!videoEl || !videoEl.srcObject) {\n      console.warn(\"[BaseMirrorQuest] Camera is not active!\");\n      return false;\n    }\n\n    this.tempCanvas.width = videoEl.videoWidth || 640;\n    this.tempCanvas.height = videoEl.videoHeight || 480;\n    this.tempCtx.drawImage(videoEl, 0, 0, this.tempCanvas.width, this.tempCanvas.height);\n\n    const currentFrameData = ImageUtils.convertToGrayscale(this.tempCanvas);\n    const matchPixel = ImageUtils.pixelWiseComparison(this.app.selfieData, currentFrameData);\n    const matchHist = ImageUtils.histogramComparison(this.app.selfieData, currentFrameData);\n    console.log(`[BaseMirrorQuest] pixel=${matchPixel.toFixed(2)}, hist=${matchHist.toFixed(2)}`);\n    const success = (matchPixel > 0.6 && matchHist > 0.7);\n\n    if (success) {\n      this.app.lastMirrorPhoto = currentFrameData;\n    }\n    return success;\n  }\n\n  /**\n   * updateUIAfterFinish\n   * Calls a custom \"updateMirrorQuestUIAfterFinish\" method in ViewManager (if available)\n   * to update UI elements after quest completion.\n   *\n   * @param {boolean} success - Indicates whether the final check was successful.\n   */\n  updateUIAfterFinish(success) {\n    if (this.app.viewManager && typeof this.app.viewManager.updateMirrorQuestUIAfterFinish === 'function') {\n      this.app.viewManager.updateMirrorQuestUIAfterFinish(success, {\n        statusElementId: this.statusElementId,\n        shootButtonId: this.shootButtonId,\n        cameraButtonId: \"toggle-camera\"\n      });\n    }\n  }\n\n  /**\n   * finish\n   * Finalizes the mirror quest:\n   * - Stops the check loop.\n   * - Performs a final status check.\n   * - Logs a diary entry indicating success or failure.\n   * - Updates the UI (e.g., disables camera highlights, resets buttons).\n   * - Clears the quest-specific state.\n   * - Marks the quest as finished in the database.\n   * - Does NOT automatically trigger the next quest or event.\n   * - Dispatches a \"questCompleted\" event to signal completion to GhostManager.\n   */\n  async finish() {\n    if (this.finished) return;\n    this.finished = true;\n\n    this.stopCheckLoop();  // Stop the quest UI check loop.\n\n    const success = await this.checkStatus(); \n    const ghost = this.app.ghostManager.getCurrentGhost();\n    const randomLetter = ghost ? this.getRandomLetter(ghost.name) : \"\";\n\n    if (success) {\n      const photoData = this.app.lastMirrorPhoto\n        ? ` [photo attached]\\n${this.app.lastMirrorPhoto}`\n        : \"\";\n      // Use the unified method for adding a diary entry.\n      await this.addDiaryEntry(`user_post_success: ${randomLetter}${photoData}`, false);\n    } else {\n      await this.addDiaryEntry(`user_post_failed: ${randomLetter}`, false);\n    }\n\n    // Update the UI after finishing the quest.\n    this.updateUIAfterFinish(success);\n\n    // Reset the \"Open Camera\" button if necessary.\n    if (this.app.viewManager && typeof this.app.viewManager.setCameraButtonActive === 'function') {\n      this.app.viewManager.setCameraButtonActive(false);\n    }\n\n    // Mark the quest as finished in the database.\n    await this.app.databaseManager.saveQuestRecord({\n      quest_key: this.key,\n      status: \"finished\",\n      current_stage: 1,\n      total_stages: 1\n    });\n\n    // Synchronize the quest state so that the \"Post\" button updates.\n    await this.app.questManager.syncQuestState();\n\n    // Dispatch a custom event to signal that the quest has been completed.\n    document.dispatchEvent(new CustomEvent(\"questCompleted\", { detail: this.key }));\n  }\n\n  /**\n   * getCurrentQuestStatus\n   * Retrieves the quest state from the database along with local flags.\n   * Now, instead of checking \"mirrorQuestActive\", it checks if the universal active quest key\n   * matches this quest's key.\n   * @returns {Promise<Object>} An object containing quest status information.\n   */\n  async getCurrentQuestStatus() {\n    const record = this.app.databaseManager.getQuestRecord(this.key);\n    const activeFlag = (StateManager.getActiveQuestKey() === this.key);\n    return {\n      key: this.key,\n      active: activeFlag,\n      finished: this.finished,\n      dbStatus: record ? record.status : \"not recorded\"\n    };\n  }\n\n  /**\n   * getRandomLetter\n   * Utility function: returns a random letter from the ghost's name.\n   * @param {string} name - The ghost's name.\n   * @returns {string} A random letter from the name.\n   */\n  getRandomLetter(name) {\n    if (!name) return \"\";\n    const letters = name.replace(/[^A-Za-zА-Яа-яЁё]/g, '').split('');\n    if (!letters.length) return '';\n    return letters[Math.floor(Math.random() * letters.length)];\n  }\n}"],"names":["WelcomeEvent","BaseMirrorQuest","PostMirrorEvent","ErrorManager","BaseEvent","constructor","eventManager","key","activate","isEventLogged","console","log","addDiaryEntry","error","logError","showError","text","isGhostPost","StateManager","appInstance","app","viewManager","setPostButtonEnabled","visualEffectsManager","triggerMirrorEffect","document","dispatchEvent","CustomEvent","detail","languageManager","get","KEYS","WELCOME_DONE","set","ImageUtils","config","doneKey","statusElementId","shootButtonId","checkInterval","finished","tempCanvas","createElement","tempCtx","getContext","registerEvents","addEventListener","getActiveQuestKey","startCheckLoop","databaseManager","saveQuestRecord","quest_key","status","current_stage","total_stages","startMirrorQuestUI","onShoot","finish","setInterval","isCameraOpen","warn","stopCheckLoop","success","checkStatus","updateMirrorQuestStatus","clearInterval","stopMirrorQuestUI","compareFrameInternally","selfieData","videoEl","cameraSectionManager","videoElement","srcObject","width","videoWidth","height","videoHeight","drawImage","currentFrameData","convertToGrayscale","matchPixel","pixelWiseComparison","matchHist","histogramComparison","toFixed","lastMirrorPhoto","updateUIAfterFinish","updateMirrorQuestUIAfterFinish","cameraButtonId","ghost","ghostManager","getCurrentGhost","randomLetter","getRandomLetter","name","photoData","setCameraButtonActive","questManager","syncQuestState","getCurrentQuestStatus","record","getQuestRecord","activeFlag","active","dbStatus","letters","replace","split","length","Math","floor","random"],"sourceRoot":""}