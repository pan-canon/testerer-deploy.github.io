export class CameraManager {
  constructor(videoElementId, faceRecManager) {
    this.videoElement = document.getElementById(videoElementId);
    this.stream = null;
    // –í–Ω–µ–¥—Ä—è–µ–º FaceRecognitionManager, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–ª—Ñ–∏
    this.faceRecManager = faceRecManager;
  }

  async start() {
    try {
      console.log("üé• –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã: user");
      const isMobile = /Android|iPhone|iPad|iPod/i.test(navigator.userAgent);
      const constraints = {
        video: { facingMode: isMobile ? "environment" : "user" }
      };

      this.stream = await navigator.mediaDevices.getUserMedia(constraints);
      if (!this.videoElement) {
        console.error("üö® –û—à–∏–±–∫–∞: videoElement –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return;
      }
      this.videoElement.srcObject = this.stream;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–º–µ—Ä–µ:", error);
    }
  }

  stop() {
    if (this.stream) {
      this.stream.getTracks().forEach(track => track.stop());
      this.stream = null;
    }
  }

  /**
   * –î–µ–ª–∞–µ–º —Å–Ω–∏–º–æ–∫ (—Å–µ–ª—Ñ–∏).
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dataURL –∏–ª–∏ null, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.
   * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º ¬´–Ω–µ –¥–∞–ª–µ–∫–æ –ª–∏ –ª–∏—Ü–æ¬ª —á–µ—Ä–µ–∑ faceRecManager?
   */
  async captureSelfie() {
    console.log("üì∏ –ü–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫...");

    if (!this.videoElement || !this.videoElement.srcObject) {
      console.error("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!");
      alert("–û—à–∏–±–∫–∞: –ö–∞–º–µ—Ä–∞ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞.");
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤–æ –ª–∏ –≤–∏–¥–µ–æ
    if (this.videoElement.readyState < 2) {
      console.warn("‚è≥ –ö–∞–º–µ—Ä–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞...");
      alert("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∫–∞–º–µ—Ä–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è.");
      return null;
    }

    try {
      // –°–æ–∑–¥–∞—ë–º canvas, —á—Ç–æ–±—ã –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –∫–∞–¥—Ä
      const canvas = document.createElement("canvas");
      canvas.width = this.videoElement.videoWidth || 640;
      canvas.height = this.videoElement.videoHeight || 480;
      const ctx = canvas.getContext("2d");
      if (!ctx) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç canvas.");

      ctx.drawImage(this.videoElement, 0, 0, canvas.width, canvas.height);
      const selfieData = canvas.toDataURL("image/png");
      if (!selfieData || selfieData.length < 100) {
        throw new Error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º ¬´–ª–∏—Ü–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ¬ª
      // –°–æ–∑–¥–∞–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ Image –∏ –ø–æ–ø—Ä–æ—Å–∏–º faceRecManager –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
      const img = new Image();
      img.src = selfieData;
      await new Promise(resolve => {
        img.onload = resolve;
        img.onerror = resolve; // —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–∞–ª–æ
      });

      // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
      const isOk = await this.faceRecManager.checkDistanceDuringSelfie(img);
      if (!isOk) {
        return null;
      }

      console.log("‚úÖ –°–Ω–∏–º–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω!");
      return selfieData;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω–∏–º–∫–∞:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω–∏–º–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      return null;
    }
  }
}
