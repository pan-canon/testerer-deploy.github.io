// faceRecognitionManager.js

/**
 * –ö–ª–∞—Å—Å FaceRecognitionManager
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ Face API, –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —Å–µ–ª—Ñ–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –ª–∏—Ü–æ–º.
 */

class FaceRecognitionManager {
  constructor() {
    // –ú–æ–∂–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –∑–¥–µ—Å—å —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å (—á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ)
    this.model = null;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ–º (–ª–µ–Ω–∏–≤–æ) –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.
   */
  async loadModel() {
    if (!this.model) {
      console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å face-landmarks-detection...");
      this.model = await faceLandmarksDetection.load(
        faceLandmarksDetection.SupportedPackages.mediapipeFacemesh
      );
      console.log("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞.");
    }
    return this.model;
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º embedding (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã) –∏–∑ —Å–µ–ª—Ñ–∏.
   * @param {string} selfieSrc - dataURL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–µ–ª—Ñ–∏).
   * @returns {Array|null} –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–ª–∏ null, –µ—Å–ª–∏ –ª–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
   */
  async loadSelfieEmbedding(selfieSrc) {
    if (!selfieSrc) {
      console.warn("‚ùå –°–µ–ª—Ñ–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
      return null;
    }

    // –°–æ–∑–¥–∞—ë–º Image –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const img = new Image();
    img.src = selfieSrc;

    // –ñ–¥—ë–º, –ø–æ–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
    await new Promise(resolve => {
      img.onload = resolve;
      img.onerror = () => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è-—Å–µ–ª—Ñ–∏");
        resolve(); // –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
      };
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å (–æ–¥–∏–Ω —Ä–∞–∑)
    const model = await this.loadModel();

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ª–∏—Ü
    const predictions = await model.estimateFaces({ input: img });
    if (!predictions.length) {
      console.warn("‚ùå –õ–∏—Ü–æ –Ω–∞ —Å–µ–ª—Ñ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
      return null;
    }

    console.log("üì∏ –õ–∏—Ü–æ –Ω–∞ —Å–µ–ª—Ñ–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:", predictions[0].scaledMesh);
    return predictions[0].scaledMesh; // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ª–∏—Ü–æ (—Å –∫–∞–º–µ—Ä—ã) —Å embedding —Å–µ–ª—Ñ–∏.
   * –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ < threshold.
   * @param {HTMLVideoElement} videoElement - –ø–æ—Ç–æ–∫ –∫–∞–º–µ—Ä—ã
   * @param {Array} selfieEmbedding - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∏—Ü–∞ –∏–∑ —Å–µ–ª—Ñ–∏
   * @returns {boolean} true - –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, false - –µ—Å–ª–∏ –Ω–µ—Ç
   */
  async compareFaces(videoElement, selfieEmbedding) {
    if (!videoElement || !selfieEmbedding) {
      console.warn("‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ –∏–ª–∏ —Å–µ–ª—Ñ–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!");
      return false;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    const model = await this.loadModel();

    // –ü–æ–ª—É—á–∞–µ–º –ª–∏—Ü–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const predictions = await model.estimateFaces({ input: videoElement });
    if (!predictions.length) {
      console.warn("‚ùå –õ–∏—Ü–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!");
      return false;
    }

    console.log("üìπ –õ–∏—Ü–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:", predictions[0].scaledMesh);

    // –°—á–∏—Ç–∞–µ–º ¬´—Å—Ä–µ–¥–Ω–µ–µ –µ–≤–∫–ª–∏–¥–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ¬ª –º–µ–∂–¥—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ—á–∫–∞–º–∏
    let distanceSum = 0;
    const realTimeMesh = predictions[0].scaledMesh;
    const count = Math.min(selfieEmbedding.length, realTimeMesh.length);

    for (let i = 0; i < count; i++) {
      distanceSum += Math.pow(selfieEmbedding[i][0] - realTimeMesh[i][0], 2);
      distanceSum += Math.pow(selfieEmbedding[i][1] - realTimeMesh[i][1], 2);
      distanceSum += Math.pow(selfieEmbedding[i][2] - realTimeMesh[i][2], 2);
    }
    const meanDist = Math.sqrt(distanceSum / count);

    console.log("üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ª–∏—Ü–∞–º–∏:", meanDist);

    // –ü–æ—Ä–æ–≥ (threshold) –º–æ–∂–Ω–æ –ø–æ–¥–±–∏—Ä–∞—Ç—å
    const threshold = 20;
    return meanDist < threshold;
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ (–º–æ–¥–∞–ª–∫—É) —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
   * @param {string} result - 'match' –∏–ª–∏ 'no-match'
   */
  showVerificationModal(result) {
    // –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥–ª–æ–∂–∫–∏
    const overlay = document.createElement("div");
    overlay.style.position = "fixed";
    overlay.style.top = 0;
    overlay.style.left = 0;
    overlay.style.width = "100vw";
    overlay.style.height = "100vh";
    overlay.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
    overlay.style.display = "flex";
    overlay.style.justifyContent = "center";
    overlay.style.alignItems = "center";
    overlay.style.zIndex = "9999";

    // –°–∞–º–æ –æ–∫–Ω–æ
    const modal = document.createElement("div");
    modal.style.background = "#fff";
    modal.style.padding = "2rem";
    modal.style.borderRadius = "8px";
    modal.style.textAlign = "center";
    modal.style.maxWidth = "400px";

    const title = document.createElement("h2");
    title.textContent = (result === "match")
      ? "–õ–∏—Ü–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!"
      : "–õ–∏—Ü–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!";
    modal.appendChild(title);

    const closeButton = document.createElement("button");
    closeButton.textContent = "–ó–∞–∫—Ä—ã—Ç—å";
    closeButton.style.marginTop = "1rem";
    closeButton.addEventListener("click", () => {
      document.body.removeChild(overlay);
    });
    modal.appendChild(closeButton);

    overlay.appendChild(modal);
    document.body.appendChild(overlay);
  }
}

// –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–ª–∞—Å—Å –≥–ª–æ–±–∞–ª—å–Ω–æ (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º import/export, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–±–æ—Ä–∫–∞)
window.FaceRecognitionManager = FaceRecognitionManager;
