import { LanguageManager } from './languageManager.js';
import { CameraManager } from './cameraManager.js';
import { ProfileManager } from './profileManager.js';
import { DatabaseManager } from './databaseManager.js';
import { EventManager } from './eventManager.js';

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Å–µ–ª—Ñ–∏-–¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –ª–∏—Ü
 */
export class App {
  constructor() {
    // DOM-—ç–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Ä–∞–Ω–æ–≤
    this.registrationScreen = document.getElementById('registration-screen');
    this.selfieScreen = document.getElementById('selfie-screen');
    this.mainScreen = document.getElementById('main-screen');
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    this.nameInput = document.getElementById('player-name');
    this.genderSelect = document.getElementById('player-gender');
    this.nextStepBtn = document.getElementById('next-step-btn');
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Ä–∞–Ω–∞ —Å–µ–ª—Ñ–∏
    this.selfieVideo = document.getElementById('selfie-video');
    this.captureBtn = document.getElementById('capture-btn');
    this.selfiePreview = document.getElementById('selfie-preview');
    this.completeBtn = document.getElementById('complete-registration');
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    this.profileNameElem = document.getElementById('profile-name');
    this.profilePhotoElem = document.getElementById('profile-photo');
    this.resetBtn = document.getElementById('reset-data');
    this.exportBtn = document.getElementById('export-profile');
    this.importFileInput = document.getElementById('import-file');
    this.importBtn = document.getElementById('import-profile-btn');
    
    // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
    this.languageManager = new LanguageManager('language-selector');
    this.cameraManager = new CameraManager('selfie-video'); // –≤–∞—à –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π cameraManager
    this.profileManager = new ProfileManager();
    this.databaseManager = new DatabaseManager(); 
    this.eventManager = new EventManager(this.databaseManager, this.languageManager);
    
    this.bindEvents();
    this.init();
  }

  bindEvents() {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    this.nameInput.addEventListener('input', () => this.validateRegistration());
    this.genderSelect.addEventListener('change', () => this.validateRegistration());

    this.nextStepBtn.addEventListener('click', () => this.goToSelfieScreen());
    this.captureBtn.addEventListener('click', () => this.captureSelfie());
    this.completeBtn.addEventListener('click', () => this.completeRegistration());
    this.resetBtn.addEventListener('click', () => this.profileManager.resetProfile());
    this.exportBtn.addEventListener('click', () => this.exportProfile());
    this.importBtn.addEventListener('click', () => this.importProfile());

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã/–¥–Ω–µ–≤–Ω–∏–∫–∞
    document.getElementById("toggle-camera").addEventListener("click", () => this.toggleCameraView());
    document.getElementById("toggle-diary").addEventListener("click", () => this.toggleCameraView());
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
   * 1) –ñ–¥—ë–º –ë–î
   * 2) –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è face embeddings, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
   * 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å -> mainScreen –∏–ª–∏ registration
   */
  async init() {
    console.log("üîÑ –ò–¥—ë—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
    await this.databaseManager.initDatabasePromise;

    // –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è embeddings (—Ö—Ä–∞–Ω–∏–º JSON-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
    this.databaseManager.db.run(`
      CREATE TABLE IF NOT EXISTS face_embeddings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        embedding TEXT,
        timestamp TEXT
      );
    `);

    console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ face_embeddings –≥–æ—Ç–æ–≤–∞!");

    if (this.profileManager.isProfileSaved()) {
      this.showMainScreen();
      this.eventManager.updateDiaryDisplay();
    } else {
      this.showRegistrationScreen();
    }
  }

  validateRegistration() {
    if (this.nameInput.value.trim() !== "" && this.genderSelect.value !== "") {
      this.nextStepBtn.disabled = false;
    } else {
      this.nextStepBtn.disabled = true;
    }
  }

  goToSelfieScreen() {
    const regData = {
      name: this.nameInput.value.trim(),
      gender: this.genderSelect.value,
      language: document.getElementById('language-selector').value
    };
    localStorage.setItem('regData', JSON.stringify(regData));
    this.registrationScreen.style.display = 'none';
    this.selfieScreen.style.display = 'block';

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É
    this.cameraManager.start();
    this.completeBtn.disabled = true;
  }

  /**
   * (1) –°–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã
   * (2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏—Ü–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
   * (3) –ï—Å–ª–∏ –æ–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º preview, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º "Complete"
   */
  async captureSelfie() {
    console.log("üì∏ –ü–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫...");

    if (!this.cameraManager.videoElement || !this.cameraManager.videoElement.srcObject) {
      console.error("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!");
      alert("–û—à–∏–±–∫–∞: –ö–∞–º–µ—Ä–∞ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞.");
      return;
    }
    const video = this.cameraManager.videoElement;
    if (video.readyState < 2) {
      console.warn("‚è≥ –ö–∞–º–µ—Ä–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞...");
      alert("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∫–∞–º–µ—Ä–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è.");
      return;
    }

    try {
      // –°–Ω–∏–º–∞–µ–º –∫–∞–¥—Ä
      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth || 640;
      canvas.height = video.videoHeight || 480;
      const ctx = canvas.getContext('2d');
      if (!ctx) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏—è.");

      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
      const selfieData = canvas.toDataURL("image/png");
      if (!selfieData || selfieData.length < 100) {
        throw new Error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º "–Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–∞–ª–µ–∫–æ" –ª–∏—Ü–æ
      const isOk = await this.checkDistanceDuringSelfie(selfieData);
      if (!isOk) {
        alert("–õ–∏—Ü–æ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–µ–ª—Ñ–∏!");
        return;
      }

      // –ï—Å–ª–∏ –≤—Å—ë –æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
      this.selfiePreview.src = selfieData;
      this.selfiePreview.style.display = 'block';
      this.completeBtn.disabled = false;

      console.log("‚úÖ –°–Ω–∏–º–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω!");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω–∏–º–∫–∞:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω–∏–º–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –ª–∏—Ü–∞ –ø—Ä–∏ —Å–µ–ª—Ñ–∏ (bounding box).
   * –ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º embedding –≤ –ë–î.
   */
  async checkDistanceDuringSelfie(base64Image) {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –ø—Ä–∏ —Å–µ–ª—Ñ–∏...");
    try {
      // –°–æ–∑–¥–∞—ë–º <img> –¥–ª—è face-landmarks-detection
      const img = new Image();
      img.src = base64Image;
      await new Promise(resolve => {
        img.onload = resolve;
        img.onerror = resolve; // –Ω–µ –∑–∞–≤–∏—Å–∞–µ–º
      });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
      console.log("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–∞...");
      const model = await faceLandmarksDetection.load(
        faceLandmarksDetection.SupportedPackages.mediapipeFacemesh
      );
      console.log("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (—Å–µ–ª—Ñ–∏-—ç—Ç–∞–ø).");

      // –ò—â–µ–º –ª–∏—Ü–æ
      const predictions = await model.estimateFaces({ input: img });
      if (!predictions.length) {
        console.warn("‚ùå –õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ!");
        return false;
      }
      const face = predictions[0];
      console.log("üìç –ù–∞–π–¥–µ–Ω–æ –ª–∏—Ü–æ:", face);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä boundingBox
      const bbox = face.boundingBox;
      const width = bbox.bottomRight[0] - bbox.topLeft[0];
      const height = bbox.bottomRight[1] - bbox.topLeft[1];
      console.log(`üëÄ –®–∏—Ä–∏–Ω–∞ –ª–∏—Ü–∞: ${width}, –í—ã—Å–æ—Ç–∞ –ª–∏—Ü–∞: ${height}`);
      if (width < 100 || height < 100) {
        console.warn("‚ùå –õ–∏—Ü–æ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ!");
        return false;
      }

      // –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º embedding –≤ –ë–î (–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π)
      const embedding = face.scaledMesh; // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫
      await this.saveFaceEmbeddingToDB(embedding);

      return true;
    } catch (err) {
      console.error("‚ùå checkDistanceDuringSelfie error:", err);
      return false;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ–º embedding –≤ —Ç–∞–±–ª–∏—Ü—É face_embeddings (–≤ JSON-–≤–∏–¥–µ).
   */
  async saveFaceEmbeddingToDB(embedding) {
    if (!embedding) return;
    const embeddingStr = JSON.stringify(embedding);
    const timestamp = new Date().toISOString();
    console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º embedding –≤ –ë–î:", embeddingStr.slice(0, 60) + "...");

    this.databaseManager.db.run(
      `INSERT INTO face_embeddings (embedding, timestamp) VALUES (?, ?)`,
      [embeddingStr, timestamp]
    );
    this.databaseManager.saveDatabase();
    console.log("‚úÖ Face embedding —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î!");
  }

  completeRegistration() {
    if (!this.selfiePreview.src) {
      alert("–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏!");
      return;
    }
    const regDataStr = localStorage.getItem('regData');
    if (!regDataStr) {
      alert("Registration data missing.");
      return;
    }
    const regData = JSON.parse(regDataStr);
    const profile = {
      name: regData.name,
      gender: regData.gender,
      language: regData.language,
      selfie: this.selfiePreview.src
    };
    this.profileManager.saveProfile(profile);
    this.cameraManager.stop();
    this.showMainScreen();

    // –ó–∞–ø—É—Å–∫–∞–µ–º "–∑–≤–æ–Ω–æ–∫" —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ (–ø—Ä–∏–º–µ—Ä)
    setTimeout(() => this.startPhoneCall(), 5000);
  }

  showMainScreen() {
    this.registrationScreen.style.display = 'none';
    this.selfieScreen.style.display = 'none';
    this.mainScreen.style.display = 'block';
    const profile = this.profileManager.getProfile();
    if (profile) {
      this.profileNameElem.textContent = profile.name;
      this.profilePhotoElem.src = profile.selfie;
      this.profilePhotoElem.style.display = 'block';
    }
  }

  showRegistrationScreen() {
    this.registrationScreen.style.display = 'block';
    this.selfieScreen.style.display = 'none';
    this.mainScreen.style.display = 'none';
  }

  //===== –°—Ü–µ–Ω–∞—Ä–∏–π –∑–≤–æ–Ω–∫–∞ (–Ω–µ –º–µ–Ω—è–µ–º –æ—Å–æ–±–æ) =====
  startPhoneCall() {
    const ringtone = new Audio('audio/phone_ringtone.mp3');
    ringtone.play();

    const answerCallBtn = document.createElement("button");
    const ignoreCallBtn = document.createElement("button");

    answerCallBtn.textContent = this.languageManager.locales[this.languageManager.getLanguage()]["answer"];
    ignoreCallBtn.textContent = this.languageManager.locales[this.languageManager.getLanguage()]["ignore"];

    // –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ
    answerCallBtn.addEventListener("click", async () => {
      ringtone.pause();
      answerCallBtn.remove();
      ignoreCallBtn.remove();
      this.triggerMirrorEffect();
      
      // –ü—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –¥–æ–±–∞–≤–ª—è–µ–º "mirror_quest" –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É
      setTimeout(async () => {
        await this.eventManager.addDiaryEntry("mirror_quest");
        this.toggleCameraView();
      }, 5000);
    });

    // –ü—Ä–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏
    ignoreCallBtn.addEventListener("click", async () => {
      await this.endCall(ringtone, answerCallBtn, ignoreCallBtn, "ignored_call");
    });

    this.mainScreen.appendChild(answerCallBtn);
    this.mainScreen.appendChild(ignoreCallBtn);
  }

  async endCall(ringtone, answerCallBtn, ignoreCallBtn, eventKey) {
    ringtone.pause();
    answerCallBtn.remove();
    ignoreCallBtn.remove();

    if (!this.eventManager.isEventLogged(eventKey)) {
      await this.eventManager.addDiaryEntry(eventKey);
    }
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–º–µ—Ä—ã
    const cameraBtn = document.getElementById("toggle-camera");
    cameraBtn.style.display = "inline-block";
  }

  triggerMirrorEffect() {
    document.body.style.transition = "background 1s";
    document.body.style.background = "black";
    setTimeout(() => {
      document.body.style.background = "";
    }, 1000);

    const staticNoise = new Audio('audio/static_noise.mp3');
    staticNoise.play();
    setTimeout(() => staticNoise.pause(), 3000);
  }

  showMirrorTask() {
    const mirrorTask = document.createElement("p");
    mirrorTask.textContent = this.languageManager.locales[this.languageManager.getLanguage()]["go_to_mirror"];
    mirrorTask.id = "mirror-task";
    document.getElementById("diary").appendChild(mirrorTask);
  }

  //===== –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–∏—Ü–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã =====
  async toggleCameraView() {
    const diary = document.getElementById("diary");
    const cameraContainer = document.getElementById("camera-container");
    const videoElement = document.getElementById("camera-view");
    const toggleCameraBtn = document.getElementById("toggle-camera");
    const toggleDiaryBtn = document.getElementById("toggle-diary");

    const buttonsToHide = [
      document.getElementById("reset-data"),
      document.getElementById("export-profile"),
      document.getElementById("import-profile-container")
    ];

    if (!videoElement) {
      console.error("üö® –û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç video –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    if (cameraContainer.style.display === "none") {
      console.log("üì∏ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–∞–º–µ—Ä—É...");
      diary.style.display = "none";
      cameraContainer.style.display = "flex";
      toggleCameraBtn.style.display = "none";
      toggleDiaryBtn.style.display = "inline-block";
      buttonsToHide.forEach(btn => { if (btn) btn.style.display = "none"; });

      this.cameraManager.videoElement = videoElement;
      await this.cameraManager.start();

      // === –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ª–∏—Ü–æ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º embedding
      setTimeout(() => {
        this.compareCurrentFace();
      }, 3000);

    } else {
      console.log("üìì –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –±–ª–æ–≥...");
      diary.style.display = "block";
      cameraContainer.style.display = "none";
      toggleCameraBtn.style.display = "inline-block";
      toggleDiaryBtn.style.display = "none";
      buttonsToHide.forEach(btn => { if (btn) btn.style.display = "block"; });

      this.cameraManager.stop();
    }
  }

  /**
   * 1) –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ embedding –∏–∑ face_embeddings
   * 2) –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –ª–∏—Ü–æ–º –≤ video
   */
  async compareCurrentFace() {
    console.log("üîé compareCurrentFace() start...");
    const videoElement = document.getElementById("camera-view");
    if (!videoElement) {
      console.warn("‚ùå –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ video –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ face_embeddings
    const selectRes = this.databaseManager.db.exec(
      "SELECT embedding FROM face_embeddings ORDER BY id DESC LIMIT 1"
    );
    if (!selectRes.length || !selectRes[0].values.length) {
      console.warn("‚ùå –í –ë–î –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ embedding!");
      return;
    }
    const row = selectRes[0].values[0];
    const embeddingStr = row[0];
    const embedding = JSON.parse(embeddingStr);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
    console.log("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ª–∏—Ü–∞...");
    const model = await faceLandmarksDetection.load(
      faceLandmarksDetection.SupportedPackages.mediapipeFacemesh
    );
    console.log("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (compare-face).");

    const predictions = await model.estimateFaces({ input: videoElement });
    if (!predictions.length) {
      console.warn("‚ùå –õ–∏—Ü–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!");
      alert("–õ–∏—Ü–æ –≤ –∫–∞–¥—Ä–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–ª–∏–∂–µ –∫ –∫–∞–º–µ—Ä–µ!");
      return;
    }
    const realTimeMesh = predictions[0].scaledMesh;
    console.log("üìπ –õ–∏—Ü–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:", realTimeMesh);

    // –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –µ–≤–∫–ª–∏–¥–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    let distanceSum = 0;
    const count = Math.min(embedding.length, realTimeMesh.length);
    for (let i = 0; i < count; i++) {
      distanceSum += Math.pow(embedding[i][0] - realTimeMesh[i][0], 2);
      distanceSum += Math.pow(embedding[i][1] - realTimeMesh[i][1], 2);
      distanceSum += Math.pow(embedding[i][2] - realTimeMesh[i][2], 2);
    }
    const meanDist = Math.sqrt(distanceSum / count);
    console.log("üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ª–∏—Ü–∞–º–∏:", meanDist);

    const threshold = 20;
    if (meanDist < threshold) {
      alert("‚úÖ –õ–∏—Ü–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!");
    } else {
      alert("‚ùå –õ–∏—Ü–æ –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç!");
    }
  }

  //===== –≠–∫—Å–ø–æ—Ä—Ç / –ò–º–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª—è (–∫–∞–∫ —É –≤–∞—Å –±—ã–ª–æ) =====
  exportProfile() {
    const profileStr = this.profileManager.exportProfile();
    if (!profileStr) {
      alert("No profile found to export.");
      return;
    }
    const diaryEntries = this.databaseManager.getDiaryEntries();
    const exportData = {
      profile: JSON.parse(profileStr),
      diary: diaryEntries
    };
    const blob = new Blob([JSON.stringify(exportData)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'profile.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  importProfile() {
    if (this.importFileInput.files.length === 0) {
      alert("Please select a profile file to import.");
      return;
    }
    const file = this.importFileInput.files[0];
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const importedData = JSON.parse(e.target.result);
        if (!importedData.profile || !importedData.profile.name ||
            !importedData.profile.gender || !importedData.profile.selfie ||
            !importedData.profile.language) {
          alert("Invalid profile file. Required profile fields are missing.");
          return;
        }
        this.profileManager.saveProfile(importedData.profile);
        if (importedData.diary && Array.isArray(importedData.diary)) {
          importedData.diary.forEach(entry => {
            if (entry.entry && entry.timestamp) {
              this.databaseManager.db.run(
                "INSERT INTO diary (entry, timestamp) VALUES (?, ?)",
                [entry.entry, entry.timestamp]
              );
            }
          });
          this.databaseManager.saveDatabase();
        }
        alert("Profile imported successfully. Reloading page.");
        window.location.reload();
      } catch (err) {
        alert("Error parsing the profile file.");
      }
    };
    reader.readAsText(file);
  }
}
