export class EventManager {
  constructor(databaseManager, languageManager) {
    this.databaseManager = databaseManager;
    this.languageManager = languageManager;
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ index.html –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å id "diary"
    this.diaryContainer = document.getElementById("diary");
  }

isEventLogged(eventKey) {
  const entries = this.databaseManager.getDiaryEntries();
  return entries.some(entry => entry.entry === eventKey);
}
  
async addDiaryEntry(key) {
  // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
  let localizedText;
  if (key === "mirror_quest" || key === "mirror_done") {
    localizedText = key;
  } else {
    localizedText = this.languageManager.locales[this.languageManager.getLanguage()][key] || key;
  }
  await this.databaseManager.addDiaryEntry(localizedText);
  this.updateDiaryDisplay();
}

  
updateDiaryDisplay() {
  if (!this.diaryContainer) {
    console.error("Diary container not found!");
    return;
  }
  this.diaryContainer.innerHTML = "";
  const entries = this.databaseManager.getDiaryEntries();
  const seen = new Set();
  entries.forEach(entry => {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø–∏—Å–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ (–∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞)
    const key = entry.entry; // –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ entry.timestamp, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!seen.has(key)) {
      seen.add(key);
      const p = document.createElement("p");
      p.textContent = `${entry.entry} (${entry.timestamp})`;
      this.diaryContainer.appendChild(p);
    }
  });
  console.log("üìñ Diary updated.");
}
  
  startMirrorQuest() {
    this.addDiaryEntry("mirror_quest");
    console.log("üé≠ Starting mirror quest...");
  }
}