export class FaceRecognitionManager {
    constructor() {
        this.model = null;
    }

    async loadModel() {
        if (!this.model) {
            this.model = await faceLandmarksDetection.load(
                faceLandmarksDetection.SupportedPackages.mediapipeFacemesh
            );
            console.log("üß† –ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
        }
    }

    async getFaceEmbedding(imageSrc) {
        if (!imageSrc) {
            console.warn("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!");
            return null;
        }

        const img = new Image();
        img.src = imageSrc;
        await new Promise(resolve => img.onload = resolve);

        await this.loadModel();
        const predictions = await this.model.estimateFaces({ input: img });

        if (!predictions.length) {
            console.warn("‚ùå –õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏!");
            return null;
        }

        console.log("üì∏ –õ–∏—Ü–æ –Ω–∞ —Ñ–æ—Ç–æ:", predictions[0].scaledMesh);
        return predictions[0].scaledMesh;
    }

    async compareFaces(videoElement, selfieEmbedding) {
        if (!videoElement || !selfieEmbedding) {
            console.warn("‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ –∏–ª–∏ —Å–µ–ª—Ñ–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!");
            return false;
        }

        await this.loadModel();
        const predictions = await this.model.estimateFaces({ input: videoElement });

        if (!predictions.length) {
            console.warn("‚ùå –õ–∏—Ü–æ –≤ –∫–∞–º–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
            return false;
        }

        console.log("üìπ –õ–∏—Ü–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:", predictions[0].scaledMesh);

        // ‚úÖ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ –ª–∏—Ü–∞ (–µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ)
        let distance = 0;
        for (let i = 0; i < selfieEmbedding.length; i++) {
            distance += Math.pow(selfieEmbedding[i][0] - predictions[0].scaledMesh[i][0], 2);
            distance += Math.pow(selfieEmbedding[i][1] - predictions[0].scaledMesh[i][1], 2);
            distance += Math.pow(selfieEmbedding[i][2] - predictions[0].scaledMesh[i][2], 2);
        }
        distance = Math.sqrt(distance / selfieEmbedding.length);

        console.log("üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ª–∏—Ü–∞–º–∏:", distance);

        return distance < 20; // üîπ –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 20 ‚Äî –ª–∏—Ü–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç!
    }
}
