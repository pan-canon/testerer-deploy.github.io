"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunktesterer_deploy_github_io"] = self["webpackChunktesterer_deploy_github_io"] || []).push([["triads/triad-post_mirror_event"],{

/***/ "./build/triads/triad-post_mirror_event.js":
/*!*************************************************!*\
  !*** ./build/triads/triad-post_mirror_event.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostMirrorEvent: () => (/* reexport safe */ events_PostMirrorEvent_js__WEBPACK_IMPORTED_MODULE_0__.PostMirrorEvent),\n/* harmony export */   PostRepeatingEvent: () => (/* reexport safe */ events_PostRepeatingEvent_js__WEBPACK_IMPORTED_MODULE_1__.PostRepeatingEvent)\n/* harmony export */ });\n/* harmony import */ var events_PostMirrorEvent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events/PostMirrorEvent.js */ \"./src/events/PostMirrorEvent.js\");\n/* harmony import */ var events_PostRepeatingEvent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events/PostRepeatingEvent.js */ \"./src/events/PostRepeatingEvent.js\");\n\n\n\n\n//# sourceURL=webpack://testerer-deploy.github.io/./build/triads/triad-post_mirror_event.js?");

/***/ }),

/***/ "./src/events/BaseEvent.js":
/*!*********************************!*\
  !*** ./src/events/BaseEvent.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseEvent: () => (/* binding */ BaseEvent)\n/* harmony export */ });\n/* harmony import */ var _managers_ErrorManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/ErrorManager.js */ \"./src/managers/ErrorManager.js\");\n\n\n/**\n * BaseEvent - Base class for events, providing common functionality\n * for activation and logging in the diary.\n * This class is used in an Observer Pattern where each event notifies\n * subscribed components (e.g., diary UI) about changes.\n */\nclass BaseEvent {\n  /**\n   * Constructor for the BaseEvent.\n   * @param {EventManager} eventManager - Instance of the event manager responsible for diary operations.\n   *\n   * @property {string} key - Unique identifier for the event, which should be set by subclasses.\n   */\n  constructor(eventManager) {\n    /** @type {EventManager} */\n    this.eventManager = eventManager;\n    // Event key; should be overridden in subclasses.\n    this.key = \"\";\n  }\n\n  /**\n   * activate - Activates the event.\n   * If an event with the given key has not been logged yet, the event is logged via the eventManager.\n   * This method handles logging and notification without triggering subsequent actions.\n   *\n   * NOTE: No direct UI manipulations should be placed here â€” any UI updates\n   *       (e.g. enabling/disabling buttons) happen in specialized managers.\n   *\n   * @returns {Promise<void>} Asynchronous execution.\n   */\n  async activate() {\n    try {\n      // Check if the event with this key has not been logged yet.\n      if (!this.eventManager.isEventLogged(this.key)) {\n        console.log(`Activating event: ${this.key}`);\n        // Log the event in the diary (as a user post, without ghost flag).\n        await this.eventManager.addDiaryEntry(this.key);\n      }\n    } catch (error) {\n      // Delegate error logging and user notification.\n      _managers_ErrorManager_js__WEBPACK_IMPORTED_MODULE_0__.ErrorManager.logError(error, \"BaseEvent.activate\");\n      _managers_ErrorManager_js__WEBPACK_IMPORTED_MODULE_0__.ErrorManager.showError(\"An error occurred during event activation.\");\n    }\n  }\n\n  /**\n   * addDiaryEntry - Convenience method to add a diary entry.\n   * Delegates the addition to the eventManager.\n   *\n   * @param {string} text - The text of the entry to be added to the diary.\n   * @param {boolean} [isGhostPost=false] - Flag indicating if this is a ghost post.\n   * @returns {Promise<void>} Asynchronous execution.\n   */\n  async addDiaryEntry(text, isGhostPost = false) {\n    try {\n      await this.eventManager.addDiaryEntry(text, isGhostPost);\n    } catch (error) {\n      _managers_ErrorManager_js__WEBPACK_IMPORTED_MODULE_0__.ErrorManager.logError(error, \"BaseEvent.addDiaryEntry\");\n      _managers_ErrorManager_js__WEBPACK_IMPORTED_MODULE_0__.ErrorManager.showError(\"An error occurred while adding a diary entry.\");\n    }\n  }\n}\n\n//# sourceURL=webpack://testerer-deploy.github.io/./src/events/BaseEvent.js?");

/***/ }),

/***/ "./src/events/PostMirrorEvent.js":
/*!***************************************!*\
  !*** ./src/events/PostMirrorEvent.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostMirrorEvent: () => (/* binding */ PostMirrorEvent)\n/* harmony export */ });\n/* harmony import */ var _BaseEvent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseEvent.js */ \"./src/events/BaseEvent.js\");\n/* harmony import */ var _managers_StateManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/StateManager.js */ \"./src/managers/StateManager.js\");\n/* harmony import */ var _managers_ErrorManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/ErrorManager.js */ \"./src/managers/ErrorManager.js\");\n// File: src/events/PostMirrorEvent.js\n\n\n\n\n\n/**\n * PostMirrorEvent\n * \n * This event publishes a ghost post and signals that the mirror quest cycle has ended.\n * It updates the UI via ViewManager without directly setting quest-specific flags.\n *\n * NOTE: This event is part of the sequential chain managed by GhostManager.\n * It only performs its task and then dispatches a \"gameEventCompleted\" event.\n */\nclass PostMirrorEvent extends _BaseEvent_js__WEBPACK_IMPORTED_MODULE_0__.BaseEvent {\n  /**\n   * @param {EventManager} eventManager - Manager handling diary operations.\n   * @param {App} appInstance - Reference to the main application instance.\n   * @param {Object} config - Configuration object from gameEntities.json, contains `key`.\n   * @param {LanguageManager} [languageManager] - (unused here, but kept for signature consistency)\n   */\n  constructor(eventManager, appInstance, config, languageManager) {\n    super(eventManager);\n    this.app = appInstance;\n    this.key = config.key;\n  }\n  async activate() {\n    if (this.eventManager.isEventLogged(this.key)) {\n      console.log(`[PostMirrorEvent] Event '${this.key}' is already logged, skipping activation.`);\n      return;\n    }\n    console.log(`[PostMirrorEvent] Activating event '${this.key}'.`);\n    await this.addDiaryEntry(this.key, true);\n\n    // Instead of directly setting mirrorQuestReady or isRepeatingCycle,\n    // signal that the mirror quest cycle has completed by enabling the Post button \n    // and triggering the mirror effect. The universal active quest state is managed elsewhere.\n    if (this.app.viewManager && typeof this.app.viewManager.setPostButtonEnabled === \"function\") {\n      this.app.viewManager.setPostButtonEnabled(true);\n    }\n    if (this.app.visualEffectsManager && typeof this.app.visualEffectsManager.triggerMirrorEffect === \"function\") {\n      this.app.visualEffectsManager.triggerMirrorEffect();\n    }\n    console.log(\"[PostMirrorEvent] Mirror quest cycle ended; waiting for user action to trigger the next quest.\");\n\n    // Dispatch an event to signal that this event has completed.\n    document.dispatchEvent(new CustomEvent(\"gameEventCompleted\", {\n      detail: this.key\n    }));\n  }\n}\n\n//# sourceURL=webpack://testerer-deploy.github.io/./src/events/PostMirrorEvent.js?");

/***/ }),

/***/ "./src/events/PostRepeatingEvent.js":
/*!******************************************!*\
  !*** ./src/events/PostRepeatingEvent.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostRepeatingEvent: () => (/* binding */ PostRepeatingEvent)\n/* harmony export */ });\n/* harmony import */ var _BaseEvent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseEvent.js */ \"./src/events/BaseEvent.js\");\n/* harmony import */ var _managers_StateManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/StateManager.js */ \"./src/managers/StateManager.js\");\n/* harmony import */ var _managers_ErrorManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/ErrorManager.js */ \"./src/managers/ErrorManager.js\");\n// File: src/events/PostRepeatingEvent.js\n\n\n\n\n\n/**\n * PostRepeatingEvent\n * \n * This event finalizes the mirror quest cycle and prepares the system for the repeating quest cycle.\n * It logs a ghost post and, if the current ghost is not finished, enables the Post button and triggers the mirror effect.\n * It does not directly set quest-specific flags; these are managed via the universal state.\n *\n * NOTE: This event does not automatically trigger quest activation;\n * it simply performs its task and dispatches a \"gameEventCompleted\" event.\n */\nclass PostRepeatingEvent extends _BaseEvent_js__WEBPACK_IMPORTED_MODULE_0__.BaseEvent {\n  /**\n   * @param {EventManager} eventManager - Manager handling diary operations.\n   * @param {App} appInstance - Reference to the main application instance.\n   * @param {Object} config - Configuration object from gameEntities.json, contains `key`.\n   * @param {LanguageManager} [languageManager] - (unused here, but kept for signature consistency)\n   */\n  constructor(eventManager, appInstance, config, languageManager) {\n    super(eventManager);\n    this.app = appInstance;\n    // Use key from config instead of hardcoded literal\n    this.key = config.key;\n  }\n\n  /**\n   * activate - Activates the post repeating event.\n   * Accepts an optional dynamicKey to generate a unique event id (e.g., \"post_repeating_event_stage_2\").\n   *\n   * @param {string} [dynamicKey] - Optional unique event key.\n   */\n  async activate(dynamicKey) {\n    const eventKey = dynamicKey || this.key;\n    if (this.eventManager.isEventLogged(eventKey)) {\n      console.log(`[PostRepeatingEvent] Event '${eventKey}' is already logged, skipping activation.`);\n      return;\n    }\n    console.log(`[PostRepeatingEvent] Activating event '${eventKey}'.`);\n    await this.addDiaryEntry(eventKey, true);\n\n    // Check if the current ghost is finished.\n    const ghost = this.app.ghostManager.getCurrentGhost();\n    if (ghost && ghost.isFinished) {\n      console.log(\"[PostRepeatingEvent] Ghost is finished; ready to dispatch event completion.\");\n      // No additional processing is needed if the ghost is finished.\n    } else {\n      // Instead of setting a mirrorQuestReady flag,\n      // simply enable the Post button and trigger the mirror effect.\n      if (this.app.viewManager && typeof this.app.viewManager.setPostButtonEnabled === \"function\") {\n        this.app.viewManager.setPostButtonEnabled(true);\n      }\n      if (this.app.visualEffectsManager && typeof this.app.visualEffectsManager.triggerMirrorEffect === \"function\") {\n        this.app.visualEffectsManager.triggerMirrorEffect();\n      }\n      console.log(\"[PostRepeatingEvent] Repeating quest cycle ended; waiting for user action.\");\n    }\n\n    // Dispatch an event to signal completion of this event.\n    document.dispatchEvent(new CustomEvent(\"gameEventCompleted\", {\n      detail: eventKey\n    }));\n  }\n}\n\n//# sourceURL=webpack://testerer-deploy.github.io/./src/events/PostRepeatingEvent.js?");

/***/ })

}]);