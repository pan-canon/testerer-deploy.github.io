export class ApartmentPlanManager {
constructor(canvasId, dbManager) {
    this.canvas = document.getElementById(canvasId);
    this.ctx = this.canvas.getContext("2d");
    this.dbManager = dbManager;

    if (!this.dbManager) {
        console.error("‚ö†Ô∏è DatabaseManager is not initialized!");
        return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    }

    this.rooms = [];
    this.currentFloor = 1;
    this.drawing = false;
    this.startX = 0;
    this.startY = 0;
    this.init();
}



nextFloor() {
    if (!this.isSwitchingFloor) {  // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
        this.isSwitchingFloor = true;
        setTimeout(() => { this.isSwitchingFloor = false; }, 200); // üîπ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
        this.currentFloor++;
        this.loadFromDB();
    }
}

prevFloor() {
    if (!this.isSwitchingFloor && this.currentFloor > 1) {
        this.isSwitchingFloor = true;
        setTimeout(() => { this.isSwitchingFloor = false; }, 200);
        this.currentFloor--;
        this.loadFromDB();
    }
}


completeApartment() {
    this.saveApartmentPlan();
    console.log("‚úÖ –ü–ª–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω!");

    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    app.showMainScreen();

    // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–≤–æ–Ω–æ–∫
    setTimeout(() => app.startPhoneCall(), 5000);
}


    init() {
        this.canvas.addEventListener("mousedown", (e) => this.startDrawing(e));
        this.canvas.addEventListener("mousemove", (e) => this.draw(e));
        this.canvas.addEventListener("mouseup", () => this.stopDrawing());
    }

    startDrawing(event) {
        this.drawing = true;
        const rect = this.canvas.getBoundingClientRect();
        this.startX = event.clientX - rect.left;
        this.startY = event.clientY - rect.top;
    }

    draw(event) {
        if (!this.drawing) return;
        const rect = this.canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        this.clearCanvas();
        this.drawAllRooms();
        this.ctx.strokeStyle = "red";
        this.ctx.strokeRect(this.startX, this.startY, x - this.startX, y - this.startY);
    }

    stopDrawing() {
        this.drawing = false;
        const roomType = prompt("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è (—Å–ø–∞–ª—å–Ω—è, –∫—É—Ö–Ω—è –∏ —Ç. –¥.)") || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ";
        this.rooms.push({ floor: this.currentFloor, x: this.startX, y: this.startY, width: 50, height: 50, type: roomType });
        this.saveToDB();
        this.drawAllRooms();
    }

    drawAllRooms() {
        this.rooms.forEach(room => {
            this.ctx.fillStyle = "rgba(0, 150, 255, 0.5)";
            this.ctx.fillRect(room.x, room.y, room.width, room.height);
            this.ctx.strokeRect(room.x, room.y, room.width, room.height);
        });
    }

    clearCanvas() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }

    saveToDB() {
        this.dbManager.addApartmentRoom(this.rooms);
    }

    loadFromDB() {
        this.dbManager.getApartmentPlan(this.currentFloor, (rooms) => {
            this.rooms = rooms;
            this.drawAllRooms();
        });
    }

saveApartmentPlan() {
  if (!this.dbManager) {
    console.error("‚ö†Ô∏è Database Manager is not initialized.");
    return;
  }

  // –ï—Å–ª–∏ rooms –ø—É—Å—Ç—ã–µ, —Å–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–ª–∞–Ω
  if (this.rooms.length === 0) {
    console.log("üè† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–ª–∞–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã.");
    this.rooms = [
      { floor: 1, x: 50, y: 50, width: 100, height: 100, type: "–ö—É—Ö–Ω—è" },
      { floor: 1, x: 200, y: 50, width: 100, height: 100, type: "–í–∞–Ω–Ω–∞—è" },
      { floor: 1, x: 350, y: 50, width: 100, height: 100, type: "–°–ø–∞–ª—å–Ω—è" }
    ];
  }

  const roomData = JSON.stringify(this.rooms); 
  this.dbManager.saveApartmentPlan(this.currentFloor, roomData);

  console.log("üè† –ü–ª–∞–Ω —ç—Ç–∞–∂–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", this.currentFloor);
  window.app.showMainScreen(); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
  setTimeout(() => window.app.startPhoneCall(), 5000); // –ó–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
}




}
