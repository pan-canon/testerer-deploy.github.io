import { LanguageManager } from './languageManager.js';
import { cameraSectionManager } from './cameraSectionManager.js';
import { ImageUtils } from './utils/imageUtils.js';
import { ProfileManager } from './profileManager.js';
import { ApartmentPlanManager } from './apartmentPlanManager.js';
import { DatabaseManager } from './databaseManager.js';
import { ShowProfileModal } from './showProfileModal.js';
import { EventManager } from './eventManager.js';
import { QuestManager } from './questManager.js';
import { GameEventManager } from './gameEventManager.js';
import { GhostManager } from './ghostManager.js';

export class App {
  constructor() {
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ switchScreen –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
    window.switchScreen = this.switchScreen.bind(this);
    // DOM-—ç–ª–µ–º–µ–Ω—Ç—ã —ç–∫—Ä–∞–Ω–æ–≤ –∏ —Ñ–æ—Ä–º—ã
    this.registrationScreen = document.getElementById('registration-screen');
    this.selfieScreen = document.getElementById('selfie-screen');
    this.mainScreen = document.getElementById('main-screen');
    this.nameInput = document.getElementById('player-name');
    this.genderSelect = document.getElementById('player-gender');
    this.nextStepBtn = document.getElementById('next-step-btn');
    this.selfieVideo = document.getElementById('selfie-video');
    this.captureBtn = document.getElementById('capture-btn');
    this.selfiePreview = document.getElementById('selfie-preview');
    this.completeBtn = document.getElementById('complete-registration');
    this.profileNameElem = document.getElementById('profile-name');
    this.profilePhotoElem = document.getElementById('profile-photo');
    this.resetBtn = document.getElementById('reset-data');
    this.exportBtn = document.getElementById('export-profile-btn');
    this.importFileInput = document.getElementById('import-file');
    this.importBtn = document.getElementById('import-profile-btn');
    this.postBtn = document.getElementById('post-btn');
    
    // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
    this.languageManager = new LanguageManager('language-selector');
    this.cameraSectionManager = new cameraSectionManager();
    this.profileManager = new ProfileManager();
    this.databaseManager = new DatabaseManager();
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º eventManager, –∑–∞—Ç–µ–º CallManager, QuestManager –∏ GameEventManager
    this.eventManager = new EventManager(this.databaseManager, this.languageManager);
    this.questManager = new QuestManager(this.eventManager, this);
    this.gameEventManager = new GameEventManager(this.eventManager, this, this.languageManager);
    this.showProfileModal = new ShowProfileModal(this);
    this.ghostManager = new GhostManager(this.eventManager, this.profileManager, this);
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    this.tempCanvas = document.createElement("canvas");
    this.tempCtx = this.tempCanvas.getContext("2d");

    this.bindEvents();
    this.init();
  }

  loadAppState() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage
    const savedGhostId = localStorage.getItem('currentGhostId');
    if (savedGhostId) {
      this.ghostManager.setCurrentGhost(parseInt(savedGhostId));
    } else {
      this.ghostManager.setCurrentGhost(1); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ü—Ä–∏–∑—Ä–∞–∫ 1 –∫–∞–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }

async init() {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∂–¥—ë–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  this.loadAppState();
  await this.databaseManager.initDatabasePromise;

  // –î–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–∞–º–µ—Ä—ã –≤–∏–¥–∏–º–æ–π –≤—Å–µ–≥–¥–∞ (–ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
  const cameraBtn = document.getElementById("toggle-camera");
  cameraBtn.style.display = "inline-block";

// –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–∏–∫ (–ø—Ä–∏ —ç—Ç–æ–º –ª–æ–≥–∏–∫–∞ –¥—É–±–ª–µ–π –±—É–¥–µ—Ç —Ä–µ—à–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
this.eventManager.updateDiaryDisplay();

// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
if (this.profileManager.isProfileSaved()) {
  const profile = this.profileManager.getProfile();
  console.log("Profile found:", profile);
  
  // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
  this.showMainScreen();
  
  // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ "welcome" —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  if (localStorage.getItem("registrationCompleted") === "true") {
    setTimeout(() => {
      this.gameEventManager.activateEvent("welcome");
    }, 5000);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ mirrorQuestActive –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –∫–∞–º–µ—Ä—ã
  if (localStorage.getItem("mirrorQuestActive") === "true") {
    cameraBtn.classList.add("glowing");
  } else {
    cameraBtn.classList.remove("glowing");
  }
} else {
  console.log("Profile not found, showing registration screen.");
  this.showRegistrationScreen();
}
}


switchScreen(screenId, buttonsGroupId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ (—ç–∫—Ä–∞–Ω—ã)
    document.querySelectorAll('section').forEach(section => section.style.display = 'none');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
      targetScreen.style.display = 'block';
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∫–Ω–æ–ø–æ–∫ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    document.querySelectorAll('#controls-panel > .buttons').forEach(group => group.style.display = 'none');
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
    if (buttonsGroupId) {
      const targetGroup = document.getElementById(buttonsGroupId);
      if (targetGroup) {
        targetGroup.style.display = 'flex';
      }
    }
  }


bindEvents() {
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
  this.nameInput.addEventListener('input', () => {
    console.log("Name input changed:", this.nameInput.value);
    this.validateRegistration();
  });

  this.genderSelect.addEventListener('change', () => {
    console.log("Gender select changed:", this.genderSelect.value);
    this.validateRegistration();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Next" —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
  if (this.nextStepBtn) {
    this.nextStepBtn.addEventListener('click', () => {
      console.log("Next button clicked");
      this.goToApartmentPlanScreen();
    });
  } else {
    console.error("–≠–ª–µ–º–µ–Ω—Ç next-step-btn –Ω–µ –Ω–∞–π–¥–µ–Ω!");
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–æ—Å—Ç–∞–≤—å—Ç–µ, –∫–∞–∫ –µ—Å—Ç—å)
  this.captureBtn.addEventListener('click', () => this.captureSelfie());
  this.completeBtn.addEventListener('click', () => this.completeRegistration());
  this.resetBtn.addEventListener('click', () => this.profileManager.resetProfile());
  this.exportBtn.addEventListener('click', () => this.exportProfile());
  this.importBtn.addEventListener('click', () => this.importProfile());
  this.profilePhotoElem.addEventListener("click", () => this.showProfileModal.show());
  document.getElementById("apartment-plan-next-btn").addEventListener("click", () => this.goToSelfieScreen());
  document.getElementById("prev-floor-btn").addEventListener("click", () => {
    if (this.apartmentPlanManager) {
      this.apartmentPlanManager.prevFloor();
    }
  });
  document.getElementById("next-floor-btn").addEventListener("click", () => {
    if (this.apartmentPlanManager) {
      this.apartmentPlanManager.nextFloor();
    }
  });
  document.getElementById("toggle-camera").addEventListener("click", () => this.toggleCameraView());
  document.getElementById("toggle-diary").addEventListener("click", () => this.toggleCameraView());

// –î–æ–±–∞–≤—å—Ç–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∏–≤—è–∑–æ–∫ —Å–æ–±—ã—Ç–∏–π
if (this.postBtn) {
  this.postBtn.addEventListener('click', () => this.handlePostButtonClick());
} else {
  console.error("–≠–ª–µ–º–µ–Ω—Ç post-btn –Ω–µ –Ω–∞–π–¥–µ–Ω!");
}
}

  
validateRegistration() {
  const isValid = (this.nameInput.value.trim() !== "" && this.genderSelect.value !== "");
  console.log("validateRegistration:", isValid);
  this.nextStepBtn.disabled = !isValid;
}


  goToApartmentPlanScreen() {
    const regData = {
      name: this.nameInput.value.trim(),
      gender: this.genderSelect.value,
      language: document.getElementById('language-selector').value
    };
    localStorage.setItem('regData', JSON.stringify(regData));
    window.switchScreen('apartment-plan-screen', 'apartment-plan-buttons');
    if (!this.apartmentPlanManager) {
      this.apartmentPlanManager = new ApartmentPlanManager('apartment-plan-container', this.databaseManager);
    }
  }
  
  goToSelfieScreen() {
const globalCamera = document.getElementById('global-camera');
globalCamera.style.display = 'block';
this.cameraSectionManager.attachTo('global-camera', {
  width: "100%",
  height: "100%",
  filter: "grayscale(100%)"
});
    this.cameraSectionManager.startCamera();
    this.completeBtn.disabled = true;
  }
  
  captureSelfie() {
    console.log("üì∏ –ü–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫...");
    if (!this.cameraSectionManager.videoElement || !this.cameraSectionManager.videoElement.srcObject) {
      console.error("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!");
      alert("–û—à–∏–±–∫–∞: –ö–∞–º–µ—Ä–∞ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞.");
      return;
    }
    const video = this.cameraSectionManager.videoElement;
    if (video.readyState < 2) {
      console.warn("‚è≥ –ö–∞–º–µ—Ä–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞...");
      alert("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∫–∞–º–µ—Ä–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è.");
      return;
    }
    try {
      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth || 640;
      canvas.height = video.videoHeight || 480;
      const ctx = canvas.getContext('2d');
      if (!ctx) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏—è.");
      }
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
      const grayscaleData = ImageUtils.convertToGrayscale(canvas);
      this.selfiePreview.src = grayscaleData;
this.selfiePreview.style.display = 'none'; // –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
// –ù–æ–≤–∞—è –º–∏–Ω–∏–∞—Ç—é—Ä–∞ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
const thumbnail = document.getElementById('selfie-thumbnail');
thumbnail.src = grayscaleData;
thumbnail.style.display = 'block';
this.completeBtn.disabled = false;
this.selfieData = grayscaleData;
      // –°–¥–µ–ª–∞—Ç—å –≤–∏–¥–∏–º—ã–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç (–µ—Å–ª–∏ –æ–Ω —Å–∫—Ä—ã—Ç)
      this.selfiePreview.parentNode.style.display = 'block';
      this.completeBtn.disabled = false;
      this.selfieData = grayscaleData;
      console.log("‚úÖ –°–Ω–∏–º–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω!");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω–∏–º–∫–∞:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω–∏–º–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  }
  
  completeRegistration() {
    if (!this.selfiePreview.src || this.selfiePreview.src === "") {
      alert("Please capture your selfie before completing registration.");
      return;
    }
    const regDataStr = localStorage.getItem('regData');
    if (!regDataStr) {
      alert("Registration data missing.");
      return;
    }
    const regData = JSON.parse(regDataStr);
    const profile = {
      name: regData.name,
      gender: regData.gender,
      language: regData.language,
      selfie: this.selfiePreview.src
    };
    this.profileManager.saveProfile(profile);
    localStorage.setItem("registrationCompleted", "true");
    this.cameraSectionManager.stopCamera();
    document.getElementById('global-camera').style.display = 'none';
    this.showMainScreen();
    
    // –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–≤–æ–Ω–∫–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ "welcome"
    setTimeout(() => {
      this.gameEventManager.activateEvent("welcome");
    }, 5000);
  }


// üîπ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–º–µ—Ä–æ–π –∏ –¥–Ω–µ–≤–Ω–∏–∫–æ–º
async toggleCameraView() {
  const diary = document.getElementById("diary");
  const cameraContainer = document.getElementById("camera-container");
  const toggleCameraBtn = document.getElementById("toggle-camera");
  const toggleDiaryBtn = document.getElementById("toggle-diary");
  const buttonsToHide = [
    document.getElementById("reset-data"),
    document.getElementById("export-profile-btn"),
    document.getElementById("import-profile-container")
  ];

  if (cameraContainer.style.display === "none") {
    console.log("üì∏ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–∞–º–µ—Ä—É...");
    diary.style.display = "none";
    cameraContainer.style.display = "flex";
    toggleCameraBtn.style.display = "none";
    toggleDiaryBtn.style.display = "inline-block";
    buttonsToHide.forEach(btn => { if (btn) btn.style.display = "none"; });

    // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –≤–∏–¥–µ–æ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –∫–∞–º–µ—Ä—ã
    this.cameraSectionManager.attachTo('camera-container', {
      width: "100%",
      height: "100%"
    });
    await this.cameraSectionManager.startCamera();

await new Promise(resolve => {
  if (this.cameraSectionManager.videoElement.readyState >= 2) {
    resolve();
  } else {
    this.cameraSectionManager.videoElement.onloadedmetadata = () => resolve();
  }
});
console.log("–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ:", this.cameraSectionManager.videoElement.videoWidth, this.cameraSectionManager.videoElement.videoHeight);

// –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å—Å—è, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–≤–µ—Å—Ç–∞, –µ—Å–ª–∏ —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–µ–Ω
setTimeout(async () => {
  if (localStorage.getItem("mirrorQuestActive") === "true") {
    console.log("–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞ –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã...");
    await this.questManager.triggerMirrorQuestIfActive();
  }
}, 5000);


    // –ó–¥–µ—Å—å –Ω–µ—Ç –≤—ã–∑–æ–≤–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∫–≤–µ—Å—Ç–æ–≤, –ø–æ—Å–∫–æ–ª—å–∫—É —Å–æ–±—ã—Ç–∏–µ –Ω–∞–≤–µ—à–∏–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–≤–µ—Å—Ç–∞.
  } else {
    console.log("üìì –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –±–ª–æ–≥...");
    diary.style.display = "block";
    cameraContainer.style.display = "none";
    toggleCameraBtn.style.display = "inline-block";
    toggleDiaryBtn.style.display = "none";
    buttonsToHide.forEach(btn => { if (btn) btn.style.display = "block"; });
    this.cameraSectionManager.stopCamera();
  }
}

 
showMainScreen() {
  window.switchScreen('main-screen', 'main-buttons');
  const profile = this.profileManager.getProfile();
  if (profile) {
    this.profileNameElem.textContent = profile.name;
    this.profilePhotoElem.src = profile.selfie;
    this.profilePhotoElem.style.display = 'block';
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–µ–ª—Ñ–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    this.selfieData = profile.selfie;
  }

  // –ï—Å–ª–∏ –≤ localStorage –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
  this.updatePostButtonState();
}


  showRegistrationScreen() {
    window.switchScreen('registration-screen', 'registration-buttons');
  }


exportProfile() {
  this.profileManager.exportProfileData(this.databaseManager, this.apartmentPlanManager);
}

importProfile() {
  if (this.importFileInput.files.length === 0) {
    alert("Please select a profile file to import.");
    return;
  }
  const file = this.importFileInput.files[0];
  this.profileManager.importProfileData(file, this.databaseManager, this.apartmentPlanManager);
}


updatePostButtonState() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ "mirrorQuestReady" –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞ –∫–≤–µ—Å—Ç–∞
  const isReady = localStorage.getItem("mirrorQuestReady") === "true";
  console.log("updatePostButtonState: mirrorQuestReady =", isReady);
  if (this.postBtn) {
    this.postBtn.disabled = !isReady;
  }
}







async handlePostButtonClick() {
  console.log("–ö–Ω–æ–ø–∫–∞ '–ó–∞–ø–æ—Å—Ç–∏—Ç—å' –Ω–∞–∂–∞—Ç–∞");
  if (localStorage.getItem("mirrorQuestReady") === "true") {
    localStorage.removeItem("mirrorQuestReady");
    this.updatePostButtonState();
    console.log("–î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
// –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –∫–∞–º–µ—Ä—É ‚Äì –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤–∏–¥–∏–º—ã–º
const cameraBtn = document.getElementById("toggle-camera");
if (cameraBtn) {
  cameraBtn.classList.add("glowing");
}
await this.questManager.activateQuest("mirror_quest");

  } else {
    alert("–ñ–¥–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç –ø—Ä–∏–∑—Ä–∞–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–≤–µ—Å—Ç–∞.");
  }
}






async compareCurrentFrame() {
  console.log("‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ compareCurrentFrame()");
  
  if (!this.selfieData) {
    console.warn("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–µ–ª—Ñ–∏!");
    return false;
  }
  
  if (!this.cameraSectionManager.videoElement || !this.cameraSectionManager.videoElement.srcObject) {
    console.warn("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!");
    return false;
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–≤—ã –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
  this.tempCanvas.width = this.cameraSectionManager.videoElement.videoWidth || 640;
  this.tempCanvas.height = this.cameraSectionManager.videoElement.videoHeight || 480;
  this.tempCtx.drawImage(
    this.cameraSectionManager.videoElement,
    0,
    0,
    this.tempCanvas.width,
    this.tempCanvas.height
  );
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ß–ë —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É
  const currentData = ImageUtils.convertToGrayscale(this.tempCanvas);
  this.lastMirrorPhoto = currentData;
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
  const matchPixel = ImageUtils.pixelWiseComparison(this.selfieData, currentData);
  const matchHistogram = ImageUtils.histogramComparison(this.selfieData, currentData);
  
  console.log(`üîé –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤: Pixel=${matchPixel.toFixed(2)}, Histogram=${matchHistogram.toFixed(2)}`);
  
  // –ï—Å–ª–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, –∏–Ω–∞—á–µ false
  if (matchPixel > 0.6 && matchHistogram > 0.7) {
    alert("‚úÖ –í—ã –ø–µ—Ä–µ–¥ –∑–µ—Ä–∫–∞–ª–æ–º!");
    return true;
  } else {
    alert("‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è!");
    return false;
  }
}



}