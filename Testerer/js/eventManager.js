export class EventManager {
  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä EventManager.
   * @param {DatabaseManager} databaseManager - —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
   * @param {LanguageManager} languageManager - –º–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.
   * @param {GhostManager} ghostManager - –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–∑—Ä–∞–∫–æ–≤.
   * @param {VisualEffectsManager} visualEffectsManager - –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.
   */
  constructor(databaseManager, languageManager, ghostManager, visualEffectsManager) {
    this.databaseManager = databaseManager;
    this.languageManager = languageManager;
    this.ghostManager = ghostManager;
    this.diaryContainer = document.getElementById("diary");
    this.visualEffectsManager = visualEffectsManager;
  }

  /**
   * isEventLogged ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º.
   * @param {string} eventKey - –∫–ª—é—á —Å–æ–±—ã—Ç–∏—è.
   * @returns {boolean} true, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞, –∏–Ω–∞—á–µ false.
   */
  isEventLogged(eventKey) {
    const entries = this.databaseManager.getDiaryEntries();
    return entries.some(entry => entry.entry === eventKey);
  }

  /**
   * addDiaryEntry ‚Äì –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫.
   * @param {string} entry - –¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏.
   * @param {boolean} [isPostFromGhost=false] - –µ—Å–ª–∏ true, –∑–∞–ø–∏—Å—å –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –ø–æ—Å—Ç.
   */
  async addDiaryEntry(entry, isPostFromGhost = false) {
    const postClass = isPostFromGhost ? "ghost-post" : "user-post";
    const entryData = { entry, postClass };
    const serializedEntry = JSON.stringify(entryData);
    await this.databaseManager.addDiaryEntry(serializedEntry);
    this.updateDiaryDisplay();
  }

  /**
   * updateDiaryDisplay ‚Äì –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞.
   */
  updateDiaryDisplay() {
    if (!this.diaryContainer) {
      console.error("Diary container not found!");
      return;
    }

    this.diaryContainer.innerHTML = "";
    const animatedIds = JSON.parse(localStorage.getItem("animatedDiaryIds") || "[]");
    const entries = this.databaseManager.getDiaryEntries();
    const seen = new Set();
    const currentLanguage = this.languageManager.getLanguage();

    entries.forEach(entryObj => {
      if (seen.has(entryObj.id)) return;
      seen.add(entryObj.id);

      const articleElem = document.createElement("article");
      articleElem.classList.add(entryObj.postClass);

      let mainText = entryObj.entry;
      let imageData = null;
      if (entryObj.entry.includes("[photo attached]")) {
        const parts = entryObj.entry.split("[photo attached]");
        mainText = parts[0].trim();
        if (parts.length >= 2) {
          imageData = parts[1].trim();
          if (!/^data:/.test(imageData)) {
            imageData = "data:image/png;base64," + imageData;
          }
        }
      }

      const localizedText =
        this.languageManager.locales[currentLanguage][mainText] || mainText;
      const cleanedText = localizedText
        .replace(/^user_post_success:\s*/, '')
        .replace(/^user_post_failed:\s*/, '');
      const formattedTimestamp = entryObj.timestamp.replace(/\.\d+Z$/, '');
      const fullText = `${cleanedText} (${formattedTimestamp})`;

      const textContainer = document.createElement("p");
      if (imageData) {
        const img = document.createElement("img");
        img.src = imageData;
        img.alt = this.languageManager.locales[currentLanguage]["photo_attached"] || "Photo attached";
        img.style.maxWidth = "100%";
        articleElem.appendChild(img);
      }
      articleElem.appendChild(textContainer);

      let messageText = fullText;
      const dateMatch = fullText.match(/(\(\d{4}-\d{2}-\d{2}.*\))$/);
      if (dateMatch) {
        const dateText = dateMatch[1].trim();
        messageText = fullText.replace(dateText, "").trim() + "<br>" + dateText;
      }

      const isAlreadyAnimated = animatedIds.includes(entryObj.id);
      const effectsManager = this.visualEffectsManager;

      if (isAlreadyAnimated) {
        textContainer.innerHTML = messageText;
      } else {
        const animatedSpan = document.createElement("span");
        textContainer.innerHTML = "";
        textContainer.appendChild(animatedSpan);

        if (entryObj.postClass === "ghost-post") {
          effectsManager.triggerGhostTextEffect(animatedSpan, messageText);
        } else {
          effectsManager.triggerUserTextEffect(animatedSpan, messageText);
        }
        animatedIds.push(entryObj.id);
      }
      this.diaryContainer.appendChild(articleElem);
    });

    localStorage.setItem("animatedDiaryIds", JSON.stringify(animatedIds));
    console.log("üìñ Diary updated.");
  }

  /**
   * startMirrorQuest ‚Äì –Ω–∞—á–∏–Ω–∞–µ—Ç –∫–≤–µ—Å—Ç —Å –∑–µ—Ä–∫–∞–ª–æ–º –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
   */
  async startMirrorQuest() {
    await this.addDiaryEntry("–ü–æ–¥–æ–π–¥–∏ –∫ –∑–µ—Ä–∫–∞–ª—É", true);
    console.log("üé≠ Starting mirror quest...");
    this.createWhatIsThisButton();
  }

  /**
   * createWhatIsThisButton ‚Äì —Å–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É "–ß—Ç–æ —ç—Ç–æ?" —Å —Ç–∞–π–º–µ—Ä–æ–º.
   */
  createWhatIsThisButton() {
    const buttonContainer = document.createElement("div");
    const button = document.createElement("button");
    button.textContent = "–ß—Ç–æ —ç—Ç–æ?!";
    button.id = "what_is_this_button";
    
    button.addEventListener("click", async () => {
      await this.startMirrorQuestProcess();
      button.style.display = 'none';
    });
    
    setTimeout(() => {
      button.style.display = 'none';
    }, 5000);

    buttonContainer.appendChild(button);
    this.diaryContainer.appendChild(buttonContainer);
  }

  /**
   * startMirrorQuestProcess ‚Äì –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞.
   */
  async startMirrorQuestProcess() {
    const success = await this.checkStatus();
    if (success) {
      const photoOrText = "–ë—É–∫–≤–∞ Z";
      await this.addDiaryEntry(photoOrText);
    } else {
      alert("‚ùå –ö–≤–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!");
    }
  }

  /**
   * checkStatus ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –ø–µ—Ä–µ–¥ –∑–µ—Ä–∫–∞–ª–æ–º.
   * @returns {boolean}
   */
  async checkStatus() {
    const success = await this.app.compareCurrentFrame();
    return success;
  }

  /**
   * startGhostQuest ‚Äì –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–≤–µ—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∏–∑—Ä–∞–∫–∞.
   */
  async startGhostQuest() {
    const ghost = this.ghostManager.getCurrentGhost();
    if (ghost) {
      const questKey = `ghost_${ghost.id}_quest`;
      await this.addDiaryEntry(questKey, true);
      console.log(`üëª Starting quest for ${ghost.name}...`);
    } else {
      console.error("‚ö†Ô∏è No active ghost found.");
    }
  }
}