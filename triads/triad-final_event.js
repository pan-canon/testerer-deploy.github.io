"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunktesterer_deploy_github_io"] = self["webpackChunktesterer_deploy_github_io"] || []).push([["triads/triad-final_event"],{

/***/ "./build/triads/triad-final_event.js":
/*!*******************************************!*\
  !*** ./build/triads/triad-final_event.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FinalEvent: () => (/* reexport safe */ events_FinalEvent_js__WEBPACK_IMPORTED_MODULE_0__.FinalEvent),\n/* harmony export */   FinalQuest: () => (/* reexport safe */ quests_FinalQuest_js__WEBPACK_IMPORTED_MODULE_1__.FinalQuest)\n/* harmony export */ });\n/* harmony import */ var events_FinalEvent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events/FinalEvent.js */ \"./src/events/FinalEvent.js\");\n/* harmony import */ var quests_FinalQuest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! quests/FinalQuest.js */ \"./src/quests/FinalQuest.js\");\n\n\n\n\n//# sourceURL=webpack://testerer-deploy.github.io/./build/triads/triad-final_event.js?");

/***/ }),

/***/ "./src/events/BaseEvent.js":
/*!*********************************!*\
  !*** ./src/events/BaseEvent.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseEvent: () => (/* binding */ BaseEvent)\n/* harmony export */ });\n/* harmony import */ var _managers_ErrorManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../managers/ErrorManager.js */ \"./src/managers/ErrorManager.js\");\n\n\n/**\n * BaseEvent - Base class for events, providing common functionality\n * for activation and logging in the diary.\n * This class is used in an Observer Pattern where each event notifies\n * subscribed components (e.g., diary UI) about changes.\n */\nclass BaseEvent {\n  /**\n   * Constructor for the BaseEvent.\n   * @param {EventManager} eventManager - Instance of the event manager responsible for diary operations.\n   *\n   * @property {string} key - Unique identifier for the event, which should be set by subclasses.\n   */\n  constructor(eventManager) {\n    /** @type {EventManager} */\n    this.eventManager = eventManager;\n    // Event key; should be overridden in subclasses.\n    this.key = \"\";\n  }\n\n  /**\n   * activate - Activates the event.\n   * If an event with the given key has not been logged yet, the event is logged via the eventManager.\n   * This method handles logging and notification without triggering subsequent actions.\n   *\n   * NOTE: No direct UI manipulations should be placed here — any UI updates\n   *       (e.g. enabling/disabling buttons) happen in specialized managers.\n   *\n   * @returns {Promise<void>} Asynchronous execution.\n   */\n  async activate() {\n    try {\n      // Check if the event with this key has not been logged yet.\n      if (!this.eventManager.isEventLogged(this.key)) {\n        console.log(`Activating event: ${this.key}`);\n        // Log the event in the diary (as a user post, without ghost flag).\n        await this.eventManager.addDiaryEntry(this.key);\n      }\n    } catch (error) {\n      // Delegate error logging and user notification.\n      _managers_ErrorManager_js__WEBPACK_IMPORTED_MODULE_0__.ErrorManager.logError(error, \"BaseEvent.activate\");\n      _managers_ErrorManager_js__WEBPACK_IMPORTED_MODULE_0__.ErrorManager.showError(\"An error occurred during event activation.\");\n    }\n  }\n\n  /**\n   * addDiaryEntry - Convenience method to add a diary entry.\n   * Delegates the addition to the eventManager.\n   *\n   * @param {string} text - The text of the entry to be added to the diary.\n   * @param {boolean} [isGhostPost=false] - Flag indicating if this is a ghost post.\n   * @returns {Promise<void>} Asynchronous execution.\n   */\n  async addDiaryEntry(text, isGhostPost = false) {\n    try {\n      await this.eventManager.addDiaryEntry(text, isGhostPost);\n    } catch (error) {\n      _managers_ErrorManager_js__WEBPACK_IMPORTED_MODULE_0__.ErrorManager.logError(error, \"BaseEvent.addDiaryEntry\");\n      _managers_ErrorManager_js__WEBPACK_IMPORTED_MODULE_0__.ErrorManager.showError(\"An error occurred while adding a diary entry.\");\n    }\n  }\n}\n\n//# sourceURL=webpack://testerer-deploy.github.io/./src/events/BaseEvent.js?");

/***/ }),

/***/ "./src/events/FinalEvent.js":
/*!**********************************!*\
  !*** ./src/events/FinalEvent.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FinalEvent: () => (/* binding */ FinalEvent)\n/* harmony export */ });\n/* harmony import */ var _BaseEvent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseEvent.js */ \"./src/events/BaseEvent.js\");\n/* harmony import */ var _managers_StateManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/StateManager.js */ \"./src/managers/StateManager.js\");\n/* harmony import */ var _managers_ErrorManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/ErrorManager.js */ \"./src/managers/ErrorManager.js\");\n// File: src/events/FinalEvent.js\n\n\n\n\n\n/**\n * FinalEvent\n *\n * This event finalizes the scenario. It logs the final event,\n * sets the game as finalized, triggers a ghost fade-out effect,\n * marks the current ghost as finished, disables active UI elements,\n * and notifies the user via the ViewManager.\n *\n * NOTE: FinalEvent is part of the sequential chain managed by GhostManager.\n * It performs its task and signals completion via the \"gameEventCompleted\" event.\n */\nclass FinalEvent extends _BaseEvent_js__WEBPACK_IMPORTED_MODULE_0__.BaseEvent {\n  /**\n   * @param {EventManager} eventManager - The diary/event manager.\n   * @param {App} appInstance - The main application instance.\n   * @param {Object} config - Configuration object from gameEntities.json, contains `key`.\n   * @param {LanguageManager} [languageManager] - Optional localization manager.\n   */\n  constructor(eventManager, appInstance, config, languageManager) {\n    super(eventManager);\n    this.app = appInstance;\n    this.languageManager = languageManager;\n    this.key = config.key;\n  }\n  async activate() {\n    if (this.eventManager.isEventLogged(this.key)) {\n      console.log(`Event '${this.key}' is already logged, skipping activation.`);\n      return;\n    }\n    console.log(`Activating final event: '${this.key}'`);\n    await this.addDiaryEntry(this.key, true);\n\n    // Set the game as finalized.\n    _managers_StateManager_js__WEBPACK_IMPORTED_MODULE_1__.StateManager.set(_managers_StateManager_js__WEBPACK_IMPORTED_MODULE_1__.StateManager.KEYS.GAME_FINALIZED, \"true\");\n\n    // Trigger the ghost fade-out effect.\n    if (this.app.visualEffectsManager && typeof this.app.visualEffectsManager.triggerGhostAppearanceEffect === \"function\") {\n      this.app.visualEffectsManager.triggerGhostAppearanceEffect(\"ghost_fade_out\");\n    }\n\n    // Mark the current ghost as finished.\n    await this.app.ghostManager.finishCurrentGhost();\n\n    // Disable active UI elements (e.g. Post button).\n    if (this.app.viewManager && typeof this.app.viewManager.setPostButtonEnabled === \"function\") {\n      this.app.viewManager.setPostButtonEnabled(false);\n    }\n\n    // Re-sync UI state.\n    if (this.app.questManager && typeof this.app.questManager.syncQuestState === \"function\") {\n      await this.app.questManager.syncQuestState();\n    }\n\n    // Remove the universal active quest key to clear any remaining quest state.\n    _managers_StateManager_js__WEBPACK_IMPORTED_MODULE_1__.StateManager.setActiveQuestKey(null);\n\n    // Notify the user that the scenario is finished.\n    if (this.app.viewManager && typeof this.app.viewManager.showNotification === \"function\") {\n      this.app.viewManager.showNotification(\"🎉 Congratulations, the scenario is finished!\");\n    } else {\n      console.log(\"🎉 Congratulations, the scenario is finished!\");\n    }\n\n    // Dispatch an event to signal completion of the final event.\n    document.dispatchEvent(new CustomEvent(\"gameEventCompleted\", {\n      detail: this.key\n    }));\n  }\n}\n\n//# sourceURL=webpack://testerer-deploy.github.io/./src/events/FinalEvent.js?");

/***/ }),

/***/ "./src/quests/FinalQuest.js":
/*!**********************************!*\
  !*** ./src/quests/FinalQuest.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FinalQuest: () => (/* binding */ FinalQuest)\n/* harmony export */ });\n/* harmony import */ var _events_BaseEvent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/BaseEvent.js */ \"./src/events/BaseEvent.js\");\n/* harmony import */ var _managers_StateManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../managers/StateManager.js */ \"./src/managers/StateManager.js\");\n\n\n\n/**\n * FinalQuest – The final quest signifies the complete end of the scenario\n * (e.g., no more letters/phenomena). It logs the completion, updates the game\n * state via StateManager, triggers the ghost finishing process, and notifies the user\n * via ViewManager.\n */\nclass FinalQuest extends _events_BaseEvent_js__WEBPACK_IMPORTED_MODULE_0__.BaseEvent {\n  /**\n   * @param {EventManager} eventManager - The event manager.\n   * @param {App} appInstance - The main application instance.\n   * @param {Object} [config] - Optional configuration (e.g., { key: \"final_quest\" }).\n   */\n  constructor(eventManager, appInstance, config = {}) {\n    super(eventManager);\n    this.app = appInstance;\n    this.key = config.key || \"final_quest\";\n    this.finished = false;\n  }\n\n  /**\n   * activate – Logs the start of the final quest (if not already logged).\n   */\n  async activate() {\n    if (!this.eventManager.isEventLogged(this.key)) {\n      console.log(`[FinalQuest] Activating final quest: ${this.key}`);\n      // Use unified method for adding diary entry.\n      await this.addDiaryEntry(this.key, true);\n    }\n    console.log(\"[FinalQuest] Final quest initiated.\");\n  }\n\n  /**\n   * checkStatus – Performs any necessary checks (e.g., additional snapshot if needed).\n   * Currently always returns true.\n   */\n  async checkStatus() {\n    return true;\n  }\n\n  /**\n   * finish – Completes the final quest:\n   *  1) Checks final conditions via checkStatus.\n   *  2) Logs the completion in the diary.\n   *  3) Sets the \"gameFinalized\" flag via StateManager.\n   *  4) Removes the universal active quest key.\n   *  5) Calls finishCurrentGhost from GhostManager.\n   *  6) Notifies the user via ViewManager.\n   *  7) Synchronizes UI state.\n   *  8) Dispatches a \"questCompleted\" event to signal completion.\n   */\n  async finish() {\n    if (this.finished) return;\n    const success = await this.checkStatus();\n    if (!success) {\n      if (this.app.viewManager && typeof this.app.viewManager.showNotification === \"function\") {\n        this.app.viewManager.showNotification(\"❌ Final quest conditions not met!\");\n      }\n      return;\n    }\n    this.finished = true;\n    console.log(`[FinalQuest] Finishing quest: ${this.key}`);\n\n    // Use unified method for adding a diary entry.\n    await this.addDiaryEntry(`${this.key}_completed`, true);\n\n    // Set the game as finalized.\n    _managers_StateManager_js__WEBPACK_IMPORTED_MODULE_1__.StateManager.set(_managers_StateManager_js__WEBPACK_IMPORTED_MODULE_1__.StateManager.KEYS.GAME_FINALIZED, \"true\");\n    // Remove the universal active quest key to clear any lingering quest state.\n    _managers_StateManager_js__WEBPACK_IMPORTED_MODULE_1__.StateManager.setActiveQuestKey(null);\n    if (this.app.ghostManager) {\n      await this.app.ghostManager.finishCurrentGhost();\n    }\n    if (this.app.viewManager && typeof this.app.viewManager.showNotification === \"function\") {\n      this.app.viewManager.showNotification(\"🎉 Final quest completed! Scenario ended!\");\n    } else {\n      console.log(\"🎉 Final quest completed! Scenario ended!\");\n    }\n    if (this.app.questManager && typeof this.app.questManager.syncQuestState === \"function\") {\n      await this.app.questManager.syncQuestState();\n    }\n    document.dispatchEvent(new CustomEvent(\"questCompleted\", {\n      detail: this.key\n    }));\n  }\n}\n\n//# sourceURL=webpack://testerer-deploy.github.io/./src/quests/FinalQuest.js?");

/***/ })

}]);