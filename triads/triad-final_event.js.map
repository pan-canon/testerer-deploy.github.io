{"version":3,"file":"triads/triad-final_event.js","mappings":"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","sources":["webpack://testerer-deploy.github.io/./build/triads/triad-final_event.js","webpack://testerer-deploy.github.io/./src/events/BaseEvent.js","webpack://testerer-deploy.github.io/./src/events/FinalEvent.js","webpack://testerer-deploy.github.io/./src/quests/FinalQuest.js"],"sourcesContent":["import { FinalEvent } from 'events/FinalEvent.js';\nimport { FinalQuest } from 'quests/FinalQuest.js';\n\nexport {\n  FinalEvent,\n  FinalQuest,\n};\n","import { ErrorManager } from '../managers/ErrorManager.js';\n\n/**\n * BaseEvent - Base class for events, providing common functionality\n * for activation and logging in the diary.\n * This class is used in an Observer Pattern where each event notifies\n * subscribed components (e.g., diary UI) about changes.\n */\nexport class BaseEvent {\n  /**\n   * Constructor for the BaseEvent.\n   * @param {EventManager} eventManager - Instance of the event manager responsible for diary operations.\n   *\n   * @property {string} key - Unique identifier for the event, which should be set by subclasses.\n   */\n  constructor(eventManager) {\n    /** @type {EventManager} */\n    this.eventManager = eventManager;\n    // Event key; should be overridden in subclasses.\n    this.key = \"\";\n  }\n\n  /**\n   * activate - Activates the event.\n   * If an event with the given key has not been logged yet, the event is logged via the eventManager.\n   * This method handles logging and notification without triggering subsequent actions.\n   *\n   * NOTE: No direct UI manipulations should be placed here — any UI updates\n   *       (e.g. enabling/disabling buttons) happen in specialized managers.\n   *\n   * @returns {Promise<void>} Asynchronous execution.\n   */\n  async activate() {\n    try {\n      // Check if the event with this key has not been logged yet.\n      if (!this.eventManager.isEventLogged(this.key)) {\n        console.log(`Activating event: ${this.key}`);\n        // Log the event in the diary (as a user post, without ghost flag).\n        await this.eventManager.addDiaryEntry(this.key);\n      }\n    } catch (error) {\n      // Delegate error logging and user notification.\n      ErrorManager.logError(error, \"BaseEvent.activate\");\n      ErrorManager.showError(\"An error occurred during event activation.\");\n    }\n  }\n\n  /**\n   * addDiaryEntry - Convenience method to add a diary entry.\n   * Delegates the addition to the eventManager.\n   *\n   * @param {string} text - The text of the entry to be added to the diary.\n   * @param {boolean} [isGhostPost=false] - Flag indicating if this is a ghost post.\n   * @returns {Promise<void>} Asynchronous execution.\n   */\n  async addDiaryEntry(text, isGhostPost = false) {\n    try {\n      await this.eventManager.addDiaryEntry(text, isGhostPost);\n    } catch (error) {\n      ErrorManager.logError(error, \"BaseEvent.addDiaryEntry\");\n      ErrorManager.showError(\"An error occurred while adding a diary entry.\");\n    }\n  }\n}","import { BaseEvent } from './BaseEvent.js';\nimport { StateManager } from '../managers/StateManager.js';\nimport { ErrorManager } from '../managers/ErrorManager.js';\n\n/**\n * FinalEvent\n *\n * This event finalizes the scenario. It logs the final event,\n * sets the game as finalized, triggers a ghost fade-out effect,\n * marks the current ghost as finished, disables active UI elements,\n * and notifies the user via the ViewManager.\n *\n * NOTE: FinalEvent is part of the sequential chain managed by GhostManager.\n * It performs its task and signals completion via the \"gameEventCompleted\" event.\n */\nexport class FinalEvent extends BaseEvent {\n  /**\n   * @param {EventManager} eventManager - The diary/event manager.\n   * @param {App} appInstance - The main application instance.\n   * @param {LanguageManager} [languageManager] - Optional localization manager.\n   */\n  constructor(eventManager, appInstance, languageManager) {\n    super(eventManager);\n    this.app = appInstance;\n    this.languageManager = languageManager;\n    this.key = \"final_event\";\n  }\n\n  async activate() {\n    if (this.eventManager.isEventLogged(this.key)) {\n      console.log(`Event '${this.key}' is already logged, skipping activation.`);\n      return;\n    }\n\n    console.log(`Activating final event: '${this.key}'`);\n    await this.addDiaryEntry(this.key, true);\n\n    // Set the game as finalized.\n    StateManager.set(StateManager.KEYS.GAME_FINALIZED, \"true\");\n\n    // Trigger the ghost fade-out effect.\n    if (this.app.visualEffectsManager && typeof this.app.visualEffectsManager.triggerGhostAppearanceEffect === \"function\") {\n      this.app.visualEffectsManager.triggerGhostAppearanceEffect(\"ghost_fade_out\");\n    }\n\n    // Mark the current ghost as finished.\n    await this.app.ghostManager.finishCurrentGhost();\n\n    // Disable active UI elements (e.g. Post button).\n    if (this.app.viewManager && typeof this.app.viewManager.setPostButtonEnabled === \"function\") {\n      this.app.viewManager.setPostButtonEnabled(false);\n    }\n\n    // Re-sync UI state.\n    if (this.app.questManager && typeof this.app.questManager.syncQuestState === \"function\") {\n      await this.app.questManager.syncQuestState();\n    }\n\n    // Remove the universal active quest key to clear any remaining quest state.\n    StateManager.setActiveQuestKey(null);\n\n    // Notify the user that the scenario is finished.\n    if (this.app.viewManager && typeof this.app.viewManager.showNotification === \"function\") {\n      this.app.viewManager.showNotification(\"🎉 Congratulations, the scenario is finished!\");\n    } else {\n      console.log(\"🎉 Congratulations, the scenario is finished!\");\n    }\n\n    // Dispatch an event to signal completion of the final event.\n    document.dispatchEvent(new CustomEvent(\"gameEventCompleted\", { detail: this.key }));\n  }\n}","import { BaseEvent } from '../events/BaseEvent.js';\nimport { StateManager } from '../managers/StateManager.js';\n\n/**\n * FinalQuest – The final quest signifies the complete end of the scenario\n * (e.g., no more letters/phenomena). It logs the completion, updates the game\n * state via StateManager, triggers the ghost finishing process, and notifies the user\n * via ViewManager.\n */\nexport class FinalQuest extends BaseEvent {\n  /**\n   * @param {EventManager} eventManager - The event manager.\n   * @param {App} appInstance - The main application instance.\n   * @param {Object} [config] - Optional configuration (e.g., { key: \"final_quest\" }).\n   */\n  constructor(eventManager, appInstance, config = {}) {\n    super(eventManager);\n    this.app = appInstance;\n    this.key = config.key || \"final_quest\";\n    this.finished = false;\n  }\n\n  /**\n   * activate – Logs the start of the final quest (if not already logged).\n   */\n  async activate() {\n    if (!this.eventManager.isEventLogged(this.key)) {\n      console.log(`[FinalQuest] Activating final quest: ${this.key}`);\n      // Use unified method for adding diary entry.\n      await this.addDiaryEntry(this.key, true);\n    }\n    console.log(\"[FinalQuest] Final quest initiated.\");\n  }\n\n  /**\n   * checkStatus – Performs any necessary checks (e.g., additional snapshot if needed).\n   * Currently always returns true.\n   */\n  async checkStatus() {\n    return true;\n  }\n\n  /**\n   * finish – Completes the final quest:\n   *  1) Checks final conditions via checkStatus.\n   *  2) Logs the completion in the diary.\n   *  3) Sets the \"gameFinalized\" flag via StateManager.\n   *  4) Removes the universal active quest key.\n   *  5) Calls finishCurrentGhost from GhostManager.\n   *  6) Notifies the user via ViewManager.\n   *  7) Synchronizes UI state.\n   *  8) Dispatches a \"questCompleted\" event to signal completion.\n   */\n  async finish() {\n    if (this.finished) return;\n\n    const success = await this.checkStatus();\n    if (!success) {\n      if (this.app.viewManager && typeof this.app.viewManager.showNotification === \"function\") {\n        this.app.viewManager.showNotification(\"❌ Final quest conditions not met!\");\n      }\n      return;\n    }\n\n    this.finished = true;\n    console.log(`[FinalQuest] Finishing quest: ${this.key}`);\n\n    // Use unified method for adding a diary entry.\n    await this.addDiaryEntry(`${this.key}_completed`, true);\n    \n    // Set the game as finalized.\n    StateManager.set(StateManager.KEYS.GAME_FINALIZED, \"true\");\n    // Remove the universal active quest key to clear any lingering quest state.\n    StateManager.setActiveQuestKey(null);\n\n    if (this.app.ghostManager) {\n      await this.app.ghostManager.finishCurrentGhost();\n    }\n\n    if (this.app.viewManager && typeof this.app.viewManager.showNotification === \"function\") {\n      this.app.viewManager.showNotification(\"🎉 Final quest completed! Scenario ended!\");\n    } else {\n      console.log(\"🎉 Final quest completed! Scenario ended!\");\n    }\n\n    if (this.app.questManager && typeof this.app.questManager.syncQuestState === \"function\") {\n      await this.app.questManager.syncQuestState();\n    }\n\n    document.dispatchEvent(new CustomEvent(\"questCompleted\", { detail: this.key }));\n  }\n}"],"names":["FinalEvent","FinalQuest","ErrorManager","BaseEvent","constructor","eventManager","key","activate","isEventLogged","console","log","addDiaryEntry","error","logError","showError","text","isGhostPost","StateManager","appInstance","languageManager","app","set","KEYS","GAME_FINALIZED","visualEffectsManager","triggerGhostAppearanceEffect","ghostManager","finishCurrentGhost","viewManager","setPostButtonEnabled","questManager","syncQuestState","setActiveQuestKey","showNotification","document","dispatchEvent","CustomEvent","detail","config","finished","checkStatus","finish","success"],"sourceRoot":""}