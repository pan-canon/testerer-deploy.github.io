// /js/questManager.js
import { MirrorQuest } from './quests/mirrorQuest.js';

export class QuestManager {
  /**
   * @param {EventManager} eventManager ‚Äì –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–±—ã—Ç–∏–π (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–Ω–µ–≤–Ω–∏–∫–æ–º)
   * @param {App} appInstance ‚Äì —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç App
   */
  constructor(eventManager, appInstance, profileManager) {
    this.eventManager = eventManager;
    this.app = appInstance;
    this.profileManager = profileManager;
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
    this.quests = [
      new MirrorQuest(this.eventManager, this.app)
      // –í –±—É–¥—É—â–µ–º —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–≤–µ—Å—Ç—ã
    ];
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–≤–µ—Å—Ç –ø–æ –µ–≥–æ –∫–ª—é—á—É
   * @param {string} key
   */
  async activateQuest(key) {
    const quest = this.quests.find(q => q.key === key);
    if (quest) {
      await quest.activate();
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∫–≤–µ—Å—Ç –ø–æ –∫–ª—é—á—É
   * @param {string} key
   */
  async checkQuest(key) {
    const quest = this.quests.find(q => q.key === key);
    if (quest) {
      await quest.finish();
    }
  }

  /**
   * –£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞
   */
  async checkMirrorQuestOnCamera() {
    await this.checkQuest("mirror_quest");
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã)
   */
  async triggerMirrorQuestIfActive() {
    if (localStorage.getItem("mirrorQuestActive") === "true") {
      console.log("ü™û –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞...");
      await this.checkMirrorQuestOnCamera();
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏.
   */
  async checkAvailablePhenomena() {
    const locationType = this.profileManager.getLocationType();
    if (locationType) {
      console.log(`–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: ${locationType}`);
      // –ú–µ—Ö–∞–Ω–∏–∑–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞—Ü–∏–∏
      const ghost = this.app.ghostManager.getCurrentGhost();
      if (ghost) {
        const locationAllowedPhenomena = {
          "–ö—É—Ö–Ω—è": ["call", "randomCall"],
          "–°–ø–∞–ª—å–Ω—è": ["call", "randomCall"],
          "–ì–æ—Å—Ç–∏–Ω–∞—è": ["call", "randomCall"],
          "–í–∞–Ω–Ω–∞—è": ["call", "randomCall"],
          "–ö–æ—Ä–∏–¥–æ—Ä": ["call", "randomCall"],
          "–î—Ä—É–≥–æ–µ": ["call", "randomCall"],
          "–ü–æ–¥—ä–µ–∑–¥": ["call", "randomCall"],
          "–ö–∞–±–∏–Ω–µ—Ç": ["call", "randomCall"],
          "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞": ["call", "randomCall"],
          "–î–µ—Ç—Å–∫–∞—è": ["call", "randomCall"],
          "–ö–ª–∞–¥–æ–≤–∞—è": ["call", "randomCall"],
          "–ì–∞—Ä–∞–∂": ["call", "randomCall"]
        };
        const locationPhenomena = locationAllowedPhenomena[locationType] || [];
        const intersection = ghost.allowedPhenomena.filter(p => locationPhenomena.includes(p));
        if (intersection.length > 0) {
          console.log(`–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è: ${intersection}`);
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç—Ç–∏—Ö —è–≤–ª–µ–Ω–∏–π
        }
      }
    }
  }
}