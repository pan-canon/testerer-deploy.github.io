// faceRecognitionManager.js

class FaceRecognitionManager {
  constructor() {
    this.model = null; // –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–Ω–∏–≤–æ
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º ¬´—Å—Ç–∞—Ç—É—Å–Ω—É—é¬ª –º–æ–¥–∞–ª–∫—É (overlay) —Å —Ç–µ–∫—Å—Ç–æ–º message.
   */
  showStatusModal(message) {
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π overlay
    let overlay = document.getElementById("status-overlay");
    if (!overlay) {
      overlay = document.createElement("div");
      overlay.id = "status-overlay";
      overlay.style.position = "fixed";
      overlay.style.top = 0;
      overlay.style.left = 0;
      overlay.style.width = "100vw";
      overlay.style.height = "100vh";
      overlay.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
      overlay.style.display = "flex";
      overlay.style.justifyContent = "center";
      overlay.style.alignItems = "center";
      overlay.style.zIndex = "9999";

      const box = document.createElement("div");
      box.id = "status-box";
      box.style.background = "#fff";
      box.style.padding = "2rem";
      box.style.borderRadius = "8px";
      box.style.textAlign = "center";

      overlay.appendChild(box);
      document.body.appendChild(overlay);
    }

    const statusBox = document.getElementById("status-box");
    statusBox.textContent = message;
  }

  /**
   * –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é –º–æ–¥–∞–ª–∫—É (overlay).
   */
  hideStatusModal() {
    const overlay = document.getElementById("status-overlay");
    if (overlay) {
      document.body.removeChild(overlay);
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å face-landmarks-detection.
   * –ì—Ä—É–∑–∏–º 1 —Ä–∞–∑, –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ.
   */
  async loadModel() {
    if (!this.model) {
      this.showStatusModal("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü–∞...");
      console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å face-landmarks-detection...");
      this.model = await faceLandmarksDetection.load(
        faceLandmarksDetection.SupportedPackages.mediapipeFacemesh
      );
      console.log("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞.");
      this.hideStatusModal();
    }
    return this.model;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–∞–ª–µ–∫–æ –ª–∏—Ü–æ (–ø–æ —Ä–∞–∑–º–µ—Ä—É bounding box).
   * –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ –ª–∏—Ü–æ –ø—Ä–∏–µ–º–ª–µ–º–æ –ø–æ —Ä–∞–∑–º–µ—Ä—É, –∏ false, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ.
   */
  isFaceCloseEnough(prediction) {
    // prediction.boundingBox = { topLeft: [x, y], bottomRight: [x2, y2] }
    const bbox = prediction.boundingBox;
    const width = Math.abs(bbox.bottomRight[0] - bbox.topLeft[0]);
    const height = Math.abs(bbox.bottomRight[1] - bbox.topLeft[1]);

    // –ú–æ–∂–µ–º –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ–π –ø–æ—Ä–æ–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–∏—Ü–æ –¥–æ–ª–∂–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 20% —à–∏—Ä–∏–Ω—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏
    const minWidth = 100;  // —É—Å–ª–æ–≤–Ω–æ
    const minHeight = 100; // —É—Å–ª–æ–≤–Ω–æ

    // –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –∏–ª–∏ –≤—ã—Å–æ—Ç–∞ –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ ¬´—Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ¬ª
    if (width < minWidth || height < minHeight) {
      console.log("‚ùå –õ–∏—Ü–æ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ: width=", width, "height=", height);
      return false;
    }
    console.log("‚úÖ –õ–∏—Ü–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä—É–ø–Ω–æ–µ: width=", width, "height=", height);
    return true;
  }

  /**
   * –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–ª—Ñ–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏—Ü–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ.
   * –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –≤–µ—Ä–Ω—ë–º true, –∏–Ω–∞—á–µ –ø–æ–∫–∞–∂–µ–º –º–æ–¥–∞–ª–∫—É ¬´–õ–∏—Ü–æ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ¬ª –∏ –≤–µ—Ä–Ω—ë–º false.
   */
  async checkDistanceDuringSelfie(imageElement) {
    this.showStatusModal("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ª–∏—Ü–∞...");
    const model = await this.loadModel();
    const predictions = await model.estimateFaces({ input: imageElement });

    this.hideStatusModal();

    if (!predictions.length) {
      alert("–õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ! –°–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏ –∑–∞–Ω–æ–≤–æ.");
      return false;
    }
    // –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ –ª–∏—Ü–æ
    const pred = predictions[0];

    // –°–º–æ—Ç—Ä–∏–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–∞–ª–µ–∫–æ
    if (!this.isFaceCloseEnough(pred)) {
      alert("–õ–∏—Ü–æ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ! –ü—Ä–∏–±–ª–∏–∑—å—Ç–µ—Å—å –∫ –∫–∞–º–µ—Ä–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–µ–ª—Ñ–∏.");
      return false;
    }
    return true;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ–º embedding (—Ç–æ—á–∫–∏ –ª–∏—Ü–∞) –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–µ–ª—Ñ–∏).
   */
  async loadSelfieEmbedding(selfieSrc) {
    if (!selfieSrc) {
      console.warn("‚ùå –°–µ–ª—Ñ–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
      return null;
    }
    this.showStatusModal("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–ª—Ñ–∏...");

    // –°–æ–∑–¥–∞—ë–º Image
    const img = new Image();
    img.src = selfieSrc;
    await new Promise(resolve => {
      img.onload = resolve;
      img.onerror = () => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è-—Å–µ–ª—Ñ–∏");
        resolve();
      };
    });

    const model = await this.loadModel();
    const predictions = await model.estimateFaces({ input: img });
    this.hideStatusModal();

    if (!predictions.length) {
      console.warn("‚ùå –õ–∏—Ü–æ –Ω–∞ —Å–µ–ª—Ñ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
      return null;
    }
    console.log("üì∏ –õ–∏—Ü–æ –Ω–∞ —Å–µ–ª—Ñ–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:", predictions[0].scaledMesh);
    return predictions[0].scaledMesh;
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ª–∏—Ü–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å embedding —Å–µ–ª—Ñ–∏.
   */
  async compareFaces(videoElement, selfieEmbedding) {
    if (!videoElement || !selfieEmbedding) {
      console.warn("‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ –∏–ª–∏ —Å–µ–ª—Ñ–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!");
      return false;
    }
    this.showStatusModal("–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ª–∏—Ü–æ —Å —Å–µ–ª—Ñ–∏...");

    const model = await this.loadModel();
    const predictions = await model.estimateFaces({ input: videoElement });

    this.hideStatusModal();

    if (!predictions.length) {
      console.warn("‚ùå –õ–∏—Ü–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!");
      return false;
    }
    console.log("üìπ –õ–∏—Ü–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:", predictions[0].scaledMesh);

    // –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –µ–≤–∫–ª–∏–¥–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    let distanceSum = 0;
    const realTimeMesh = predictions[0].scaledMesh;
    const count = Math.min(selfieEmbedding.length, realTimeMesh.length);

    for (let i = 0; i < count; i++) {
      distanceSum += Math.pow(selfieEmbedding[i][0] - realTimeMesh[i][0], 2);
      distanceSum += Math.pow(selfieEmbedding[i][1] - realTimeMesh[i][1], 2);
      distanceSum += Math.pow(selfieEmbedding[i][2] - realTimeMesh[i][2], 2);
    }
    const meanDist = Math.sqrt(distanceSum / count);
    console.log("üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ª–∏—Ü–∞–º–∏:", meanDist);

    const threshold = 20;
    return meanDist < threshold;
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (match / no-match / too-far).
   */
  showVerificationModal(result, detail = "") {
    // –°–æ–∑–¥–∞—ë–º –æ–≤–µ—Ä–ª–µ–π
    const overlay = document.createElement("div");
    overlay.style.position = "fixed";
    overlay.style.top = 0;
    overlay.style.left = 0;
    overlay.style.width = "100vw";
    overlay.style.height = "100vh";
    overlay.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
    overlay.style.display = "flex";
    overlay.style.justifyContent = "center";
    overlay.style.alignItems = "center";
    overlay.style.zIndex = "9999";

    const modal = document.createElement("div");
    modal.style.background = "#fff";
    modal.style.padding = "2rem";
    modal.style.borderRadius = "8px";
    modal.style.textAlign = "center";
    modal.style.maxWidth = "400px";

    const title = document.createElement("h2");
    if (result === "match") {
      title.textContent = "–õ–∏—Ü–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!";
    } else if (result === "no-match") {
      title.textContent = "–õ–∏—Ü–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!";
    } else if (result === "too-far") {
      title.textContent = "–õ–∏—Ü–æ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ!";
    } else {
      title.textContent = "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω";
    }
    modal.appendChild(title);

    if (detail) {
      const detailP = document.createElement("p");
      detailP.textContent = detail;
      modal.appendChild(detailP);
    }

    const closeButton = document.createElement("button");
    closeButton.textContent = "–ó–∞–∫—Ä—ã—Ç—å";
    closeButton.style.marginTop = "1rem";
    closeButton.addEventListener("click", () => {
      document.body.removeChild(overlay);
    });
    modal.appendChild(closeButton);

    overlay.appendChild(modal);
    document.body.appendChild(overlay);
  }
}

// –î–µ–ª–∞–µ–º –∫–ª–∞—Å—Å –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º ESM-—ç–∫—Å–ø–æ—Ä—Ç)
window.FaceRecognitionManager = FaceRecognitionManager;
