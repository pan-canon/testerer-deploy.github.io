{"version":3,"file":"triads/triad-post_repeating_event.js","mappings":"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","sources":["webpack://testerer-deploy.github.io/./build/triads/triad-post_repeating_event.js","webpack://testerer-deploy.github.io/./src/config/detectableItems.js","webpack://testerer-deploy.github.io/./src/events/BaseEvent.js","webpack://testerer-deploy.github.io/./src/events/FinalEvent.js","webpack://testerer-deploy.github.io/./src/events/PostRepeatingEvent.js","webpack://testerer-deploy.github.io/./src/quests/BaseRepeatingQuest.js"],"sourcesContent":["import { PostRepeatingEvent } from 'events/PostRepeatingEvent.js';\nimport { BaseRepeatingQuest } from 'quests/BaseRepeatingQuest.js';\nimport { FinalEvent } from 'events/FinalEvent.js';\n\nexport {\n  PostRepeatingEvent,\n  BaseRepeatingQuest,\n  FinalEvent,\n};\n","// src/config/detectableItems.js\n// List of household items for repeating quest detection\nexport const detectableItems = [\n  'toilet',\n  'clock',\n  'lamp',\n  'chair',\n  'table',\n  'couch',\n  'bed',\n  'refrigerator',\n  'book',\n  'cup'\n];","import { ErrorManager } from '../managers/ErrorManager.js';\n\n/**\n * BaseEvent - Base class for events, providing common functionality\n * for activation and logging in the diary.\n * This class is used in an Observer Pattern where each event notifies\n * subscribed components (e.g., diary UI) about changes.\n */\nexport class BaseEvent {\n  /**\n   * Constructor for the BaseEvent.\n   * @param {EventManager} eventManager - Instance of the event manager responsible for diary operations.\n   *\n   * @property {string} key - Unique identifier for the event, which should be set by subclasses.\n   */\n  constructor(eventManager) {\n    /** @type {EventManager} */\n    this.eventManager = eventManager;\n    // Event key; should be overridden in subclasses.\n    this.key = \"\";\n  }\n\n  /**\n   * activate - Activates the event.\n   * If an event with the given key has not been logged yet, the event is logged via the eventManager.\n   * This method handles logging and notification without triggering subsequent actions.\n   *\n   * NOTE: No direct UI manipulations should be placed here — any UI updates\n   *       (e.g. enabling/disabling buttons) happen in specialized managers.\n   *\n   * @returns {Promise<void>} Asynchronous execution.\n   */\n  async activate() {\n    try {\n      // Check if the event with this key has not been logged yet.\n      if (!this.eventManager.isEventLogged(this.key)) {\n        console.log(`Activating event: ${this.key}`);\n        // Log the event in the diary (as a user post, without ghost flag).\n        await this.eventManager.addDiaryEntry(this.key);\n      }\n    } catch (error) {\n      // Delegate error logging and user notification.\n      ErrorManager.logError(error, \"BaseEvent.activate\");\n      ErrorManager.showError(\"An error occurred during event activation.\");\n    }\n  }\n\n  /**\n   * addDiaryEntry - Convenience method to add a diary entry.\n   * Delegates the addition to the eventManager.\n   *\n   * @param {string} text - The text of the entry to be added to the diary.\n   * @param {boolean} [isGhostPost=false] - Flag indicating if this is a ghost post.\n   * @returns {Promise<void>} Asynchronous execution.\n   */\n  async addDiaryEntry(text, isGhostPost = false) {\n    try {\n      await this.eventManager.addDiaryEntry(text, isGhostPost);\n    } catch (error) {\n      ErrorManager.logError(error, \"BaseEvent.addDiaryEntry\");\n      ErrorManager.showError(\"An error occurred while adding a diary entry.\");\n    }\n  }\n}","// File: src/events/FinalEvent.js\n\nimport { BaseEvent } from './BaseEvent.js';\nimport { StateManager } from '../managers/StateManager.js';\nimport { ErrorManager } from '../managers/ErrorManager.js';\n\n/**\n * FinalEvent\n *\n * This event finalizes the scenario. It logs the final event,\n * sets the game as finalized, triggers a ghost fade-out effect,\n * marks the current ghost as finished, disables active UI elements,\n * and notifies the user via the ViewManager.\n *\n * NOTE: FinalEvent is part of the sequential chain managed by GhostManager.\n * It performs its task and signals completion via the \"gameEventCompleted\" event.\n */\nexport class FinalEvent extends BaseEvent {\n  /**\n   * @param {EventManager} eventManager - The diary/event manager.\n   * @param {App} appInstance - The main application instance.\n   * @param {Object} config - Configuration object from gameEntities.json, contains `key`.\n   * @param {LanguageManager} [languageManager] - Optional localization manager.\n   */\n  constructor(eventManager, appInstance, config, languageManager) {\n    super(eventManager);\n    this.app = appInstance;\n    this.languageManager = languageManager;\n    this.key = config.key;\n  }\n\n  async activate() {\n    if (this.eventManager.isEventLogged(this.key)) {\n      console.log(`Event '${this.key}' is already logged, skipping activation.`);\n      return;\n    }\n\n    console.log(`Activating final event: '${this.key}'`);\n    await this.addDiaryEntry(this.key, true);\n\n    // Set the game as finalized.\n    StateManager.set(StateManager.KEYS.GAME_FINALIZED, \"true\");\n\n    // Trigger the ghost fade-out effect.\n    if (\n      this.app.visualEffectsManager &&\n      typeof this.app.visualEffectsManager.triggerGhostAppearanceEffect === \"function\"\n    ) {\n      this.app.visualEffectsManager.triggerGhostAppearanceEffect(\"ghost_fade_out\");\n    }\n\n    // Mark the current ghost as finished.\n    await this.app.ghostManager.finishCurrentGhost();\n\n    // Disable active UI elements (e.g. Post button).\n    if (\n      this.app.viewManager &&\n      typeof this.app.viewManager.setPostButtonEnabled === \"function\"\n    ) {\n      this.app.viewManager.setPostButtonEnabled(false);\n    }\n\n    // Re-sync UI state.\n    if (\n      this.app.questManager &&\n      typeof this.app.questManager.syncQuestState === \"function\"\n    ) {\n      await this.app.questManager.syncQuestState();\n    }\n\n    // Remove the universal active quest key to clear any remaining quest state.\n    StateManager.setActiveQuestKey(null);\n\n    // Notify the user that the scenario is finished.\n    if (\n      this.app.viewManager &&\n      typeof this.app.viewManager.showNotification === \"function\"\n    ) {\n      this.app.viewManager.showNotification(\"🎉 Congratulations, the scenario is finished!\");\n    } else {\n      console.log(\"🎉 Congratulations, the scenario is finished!\");\n    }\n\n    // Dispatch an event to signal completion of the final event.\n    document.dispatchEvent(new CustomEvent(\"gameEventCompleted\", { detail: this.key }));\n  }\n}","// File: src/events/PostRepeatingEvent.js\n\nimport { BaseEvent } from './BaseEvent.js';\nimport { StateManager } from '../managers/StateManager.js';\nimport { ErrorManager } from '../managers/ErrorManager.js';\n\n/**\n * PostRepeatingEvent\n * \n * This event finalizes the mirror quest cycle and prepares the system for the repeating quest cycle.\n * It logs a ghost post and, if the current ghost is not finished, enables the Post button and triggers the mirror effect.\n * It does not directly set quest-specific flags; these are managed via the universal state.\n *\n * NOTE: This event does not automatically trigger quest activation;\n * it simply performs its task and dispatches a \"gameEventCompleted\" event.\n */\nexport class PostRepeatingEvent extends BaseEvent {\n  /**\n   * @param {EventManager} eventManager - Manager handling diary operations.\n   * @param {App} appInstance  - Reference to the main application instance.\n   * @param {Object} config    - Configuration object from gameEntities.json, contains `key`.\n   */\n  constructor(eventManager, appInstance, config) {\n    super(eventManager);\n    this.app = appInstance;\n    // Use key from config instead of hardcoded literal\n    this.key = config.key;\n  }\n\n  /**\n   * activate - Activates the post repeating event.\n   * Accepts an optional dynamicKey to generate a unique event id (e.g., \"post_repeating_event_stage_2\").\n   *\n   * @param {string} [dynamicKey] - Optional unique event key.\n   */\n  async activate(dynamicKey) {\n    const eventKey = dynamicKey || this.key;\n    if (this.eventManager.isEventLogged(eventKey)) {\n      console.log(`[PostRepeatingEvent] Event '${eventKey}' is already logged, skipping activation.`);\n      return;\n    }\n    console.log(`[PostRepeatingEvent] Activating event '${eventKey}'.`);\n\n    await this.addDiaryEntry(eventKey, true);\n\n    // Check if the current ghost is finished.\n    const ghost = this.app.ghostManager.getCurrentGhost();\n    if (ghost && ghost.isFinished) {\n      console.log(\"[PostRepeatingEvent] Ghost is finished; ready to dispatch event completion.\");\n      // No additional processing is needed if the ghost is finished.\n    } else {\n      // Instead of setting a mirrorQuestReady flag,\n      // simply enable the Post button and trigger the mirror effect.\n      if (this.app.viewManager && typeof this.app.viewManager.setPostButtonEnabled === \"function\") {\n        this.app.viewManager.setPostButtonEnabled(true);\n      }\n      \n      if (this.app.visualEffectsManager && typeof this.app.visualEffectsManager.triggerMirrorEffect === \"function\") {\n        this.app.visualEffectsManager.triggerMirrorEffect();\n      }\n      console.log(\"[PostRepeatingEvent] Repeating quest cycle ended; waiting for user action.\");\n    }\n\n    // Dispatch an event to signal completion of this event.\n    document.dispatchEvent(new CustomEvent(\"gameEventCompleted\", { detail: eventKey }));\n  }\n}","import { BaseEvent } from '../events/BaseEvent.js';\nimport { ImageUtils } from '../utils/ImageUtils.js';\nimport { StateManager } from '../managers/StateManager.js';\nimport { ErrorManager } from '../managers/ErrorManager.js';\nimport { detectableItems } from '../config/detectableItems.js';\n\n/**\n * BaseRepeatingQuest – Base class for the repeating quest.\n * Manages quest progress by updating state across multiple stages,\n * saving progress via StateManager, and delegating UI updates to ViewManager.\n *\n * NOTE: This quest is part of the sequential chain managed by GhostManager.\n */\nexport class BaseRepeatingQuest extends BaseEvent {\n  constructor(eventManager, appInstance, config = {}) {\n    super(eventManager);\n    this.app = appInstance;\n    this.key = config.key || \"repeating_quest\";\n    this.doneKey = config.doneKey || (this.key + \"_done\");\n\n    // UI configuration (delegated to ViewManager)\n    this.statusElementId = config.statusElementId || \"repeating-quest-status\";\n    this.shootButtonId = config.shootButtonId || \"btn_shoot\";\n\n    // Quest state\n    this.totalStages = config.totalStages || 3;\n    this.currentStage = 1;\n    this.activated = false;\n    this.finished = false;\n\n    // (Optional flag – not used further, can be removed if unnecessary)\n    this.finalRepeatingQuestCompleted = false;\n\n    // Restore saved quest state from StateManager.\n    this.loadState();\n\n    // ==== new: initialize remaining items and pick the currentTarget ====\n    // Restore the list of remaining items from StateManager or use the default array\n    const savedItems = StateManager.get('remainingItems');\n    this.remainingItems = savedItems\n      ? JSON.parse(savedItems)\n      : [...detectableItems];\n    // Save the remaining items list (if not already saved)\n    StateManager.set('remainingItems', JSON.stringify(this.remainingItems));\n\n    // Pick the first item from the list as the current target\n    this.currentTarget = this.remainingItems.length > 0 ? this.remainingItems[0] : null;\n\n    // subscribe to AI‐detection events and enable Shoot button when target is found\n    document.addEventListener(\"objectDetected\", this.onObjectDetected.bind(this));\n  }\n\n  /**\n   * generateDetectionConfig\n   * Returns an object with current target for AI detection.\n   * @returns {{ target: string }}\n   */\n  generateDetectionConfig() {\n    // Use the quest’s currentTarget (set in constructor)\n    console.log(`[BaseRepeatingQuest] Providing detection target: ${this.currentTarget}`);\n    return { target: this.currentTarget };\n  }\n\n  /**\n   * loadState – Restores the quest state from StateManager.\n   */\n  loadState() {\n    const saved = StateManager.get(`quest_state_${this.key}`);\n    if (saved) {\n      try {\n        const state = JSON.parse(saved);\n        this.currentStage = state.currentStage;\n        this.finished = state.finished;\n        if (state.totalStages) {\n          this.totalStages = state.totalStages;\n        }\n        console.log(`[BaseRepeatingQuest] Restored quest state: stage=${this.currentStage}, finished=${this.finished}`);\n      } catch (e) {\n        console.error(\"[BaseRepeatingQuest] Error parsing saved quest state:\", e);\n      }\n    }\n  }\n\n  /**\n   * saveState – Saves the current quest state to StateManager.\n   */\n  saveState() {\n    const state = {\n      currentStage: this.currentStage,\n      finished: this.finished,\n      totalStages: this.totalStages\n    };\n    StateManager.set(`quest_state_${this.key}`, JSON.stringify(state));\n    console.log(`[BaseRepeatingQuest] Saved quest state: stage=${this.currentStage}, finished=${this.finished}`);\n  }\n\n  /**\n   * activate – Activates the repeating quest.\n   * Waits for the camera to be open (using a \"cameraReady\" event) if needed,\n   * then starts the UI check loop and sets the \"Open Camera\" button active via ViewManager.\n   * Also saves the quest record in the database with status \"active\".\n   */\n  async activate() {\n    console.log(`Activating repeating quest: ${this.key}`);\n\n    // 1) запишем в дневник и в БД\n    await this.addDiaryEntry(this.key, true);\n    await this.app.databaseManager.saveQuestRecord({\n      quest_key: this.key,\n      status: \"active\",\n      current_stage: this.currentStage,\n      total_stages: this.totalStages\n    });\n\n    // 2) визуально подсветить камеру-кнопку\n    if (this.app.viewManager?.setCameraButtonActive) {\n      this.app.viewManager.setCameraButtonActive(true);\n    }\n\n    // 3) флажок что квест стартанул\n    this.activated = true;\n\n    // 4) Ждём, пока пользователь сам откроет камеру…\n    if (this.app.isCameraOpen) {\n      this.startCheckLoop();\n    } else {\n      document.addEventListener(\"cameraReady\", () => {\n        console.log(\"[BaseRepeatingQuest] cameraReady received — starting quest loop\");\n        this.startCheckLoop();\n      }, { once: true });\n    }\n  }\n\n  /**\n   * startCheckLoop – Delegates UI initialization for the quest stage to ViewManager,\n   * then awaits user action (via the shoot button).\n   */\n  startCheckLoop() {\n    // теперь запускаем детекцию ТОЛЬКО если камера открыта, квест активирован и он не завершён\n    if (this.app.isCameraOpen && this.activated && !this.finished) {\n      console.log(`[BaseRepeatingQuest] Starting AI detection for target '${this.currentTarget}'.`);\n      this.app.cameraSectionManager?.startAIDetection?.({ target: this.currentTarget });\n    }\n\n    // далее — инициализируем UI (статус + disabled Shoot)\n    if (this.app.viewManager?.startRepeatingQuestUI) {\n      this.app.viewManager.startRepeatingQuestUI({\n        statusElementId: this.statusElementId,\n        shootButtonId:   this.shootButtonId,\n        stage:           this.currentStage,\n        totalStages:     this.totalStages,\n        target:          this.currentTarget,\n        onShoot:         () => this.finishStage(),\n        quest:           this\n      });\n    } else {\n      console.error(\"[BaseRepeatingQuest] ViewManager.startRepeatingQuestUI is not available.\");\n    }\n    console.log(\"[BaseRepeatingQuest] Repeating quest UI updated. Awaiting user action to capture snapshot.\");\n  }\n\n  /**\n   * restoreUI – Restores the UI for the repeating quest if a cycle is active.\n   * This method now checks the DB record and, if the quest is active there,\n   * sets the local 'activated' flag to true before restoring the UI.\n   */\n  restoreUI() {\n    console.log(\"[BaseRepeatingQuest] Attempting to restore repeating quest UI...\");\n\n    // Retrieve the DB record for this quest.\n    const record = this.app.databaseManager.getQuestRecord(this.key);\n    \n    // If there is no record or the status is not \"active\", skip restoration.\n    if (!record || record.status !== \"active\") {\n      console.log(\"[BaseRepeatingQuest] DB record is not active; UI restoration skipped.\");\n      return;\n    }\n    \n    // If the quest is finished locally, skip restoration.\n    if (this.finished) {\n      console.log(\"[BaseRepeatingQuest] Quest is finished; UI restoration skipped.\");\n      return;\n    }\n    \n    // If the quest was not activated locally (e.g. after a page reload), set it to active based on DB record.\n    if (!this.activated) {\n      console.log(\"[BaseRepeatingQuest] Quest not activated locally; setting activated=true based on DB record.\");\n      this.activated = true;\n    }\n\n    // Function to restore UI state.\n    const restoreButtonState = () => {\n      // Переинициализируем UI: статусы, статус-бар и запустим детекцию,\n      // но кнопку “Shoot” оставляем выключенной до фактической objectDetected().\n      this.startCheckLoop();\n      console.log(\"[BaseRepeatingQuest] UI restored; shoot button will be enabled upon detection.\");\n    };\n\n    // If the camera is not open yet, wait for the \"cameraReady\" event.\n    if (!this.app.isCameraOpen) {\n      document.addEventListener(\"cameraReady\", restoreButtonState, { once: true });\n    } else {\n      restoreButtonState();\n    }\n\n    // Если камера была открыта и videoElement уже готов,\n    // сразу запускаем восстановление (на случай, если loadedmetadata уже случился).\n    const video = this.app.cameraSectionManager.videoElement;\n    if (\n      StateManager.isCameraOpen() &&\n      video &&\n      video.srcObject &&\n      video.readyState >= 2\n    ) {\n      console.log(\"[BaseRepeatingQuest] videoElement.readyState >= 2 — сразу восстанавливаем детекцию\");\n      restoreButtonState();\n    }\n  }\n\n  /**\n   * finishStage – Completes one stage of the repeating quest.\n   * Disables the \"Shoot\" button, captures a snapshot, logs the stage completion,\n   * updates quest state, and enables the \"Post\" button for the next stage (if any).\n   * \n   * IMPORTANT: After finishing a stage (if quest is not finished),\n   * a \"questCompleted\" event is dispatched to notify GhostManager.\n   */\n  async finishStage() {\n    if (this.finished) return;\n\n    // stop AI detection as soon as user pressed Shoot\n    if (this.app.cameraSectionManager && typeof this.app.cameraSectionManager.stopAIDetection === 'function') {\n      this.app.cameraSectionManager.stopAIDetection();\n      console.log(\"[BaseRepeatingQuest] AI detection stopped after shoot.\");\n    }\n\n    if (this.app.viewManager && typeof this.app.viewManager.setShootButtonActive === 'function') {\n      this.app.viewManager.setShootButtonActive(false);\n      console.log(\"[BaseRepeatingQuest] Shoot button disabled after click.\");\n    }\n\n    const photoData = this.captureSimplePhoto();\n    console.log(`[BaseRepeatingQuest] Captured snapshot for stage ${this.currentStage}.`);\n\n    // Use unified method to log diary entry.\n    await this.addDiaryEntry(`repeating_stage_${this.currentStage} [photo attached]\\n${photoData}`, false);\n    console.log(`[BaseRepeatingQuest] Completed stage: ${this.currentStage}`);\n\n    this.currentStage++;\n    this.saveState();\n\n    // Remove the processed item from remainingItems and persist for next cycles\n    if (this.currentTarget) {\n      this.remainingItems.shift();\n      StateManager.set('remainingItems', JSON.stringify(this.remainingItems));\n      this.currentTarget = this.remainingItems[0] || null;\n      console.log(`[BaseRepeatingQuest] Next detection target: ${this.currentTarget}`);\n    }\n\n    if (this.currentStage <= this.totalStages) {\n      // For intermediate stages, force the quest record to be \"finished\"\n      // so that a new instance of the quest can be started.\n      await this.app.databaseManager.saveQuestRecord({\n        quest_key: this.key,\n        status: \"finished\",\n        current_stage: this.currentStage,\n        total_stages: this.totalStages\n      });\n      // Removed direct call to set \"mirrorQuestReady\"; universal active quest state is managed externally.\n      if (this.app.viewManager && typeof this.app.viewManager.setPostButtonEnabled === 'function') {\n        this.app.viewManager.setPostButtonEnabled(true);\n        console.log(\"[BaseRepeatingQuest] Post button enabled for next stage.\");\n      }\n      // Dispatch event to notify that a stage of the repeating quest is completed.\n      document.dispatchEvent(new CustomEvent(\"questCompleted\", { detail: this.key }));\n      console.log(\"[BaseRepeatingQuest] questCompleted event dispatched for repeating quest stage.\");\n    } else {\n      // If the current stage exceeds the total stages, finish the quest completely.\n      await this.finishCompletely();\n    }\n  }\n\n  /**\n   * finishCompletely – Finalizes the repeating quest.\n   * Sets the quest as finished in the database, removes the quest state from StateManager,\n   * and dispatches the questCompleted event to signal full completion.\n   */\n  async finishCompletely() {\n    // Mark the quest as finished.\n    this.finished = true;\n    // Save the final state in the database with status \"finished\".\n    await this.app.databaseManager.saveQuestRecord({\n      quest_key: this.key,\n      status: \"finished\",\n      current_stage: this.currentStage,\n      total_stages: this.totalStages\n    });\n    // Remove the quest state from StateManager so that it doesn't get restored on page refresh.\n    StateManager.remove(`quest_state_${this.key}`);\n    // Dispatch the questCompleted event to signal full completion.\n    document.dispatchEvent(new CustomEvent(\"questCompleted\", { detail: this.key }));\n    console.log(`[BaseRepeatingQuest] Quest completely finished. questCompleted event dispatched.`);\n  }\n\n  /**\n   * captureSimplePhoto – Captures a snapshot from the active camera and returns a data URL.\n   * @returns {string} Data URL of the captured image.\n   */\n  captureSimplePhoto() {\n    const video = this.app.cameraSectionManager?.videoElement;\n    if (!video || !video.srcObject) {\n      console.warn(\"[BaseRepeatingQuest] Camera is not active — returning an empty string\");\n      return \"\";\n    }\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    return canvas.toDataURL(\"image/png\");\n  }\n\n  /**\n   * resetCycle – Resets the state of the repeating quest for a new cycle.\n   */\n  resetCycle() {\n    this.finished = false;\n    this.currentStage = 1;\n    console.log(\"[BaseRepeatingQuest] Quest state has been reset for a new cycle.\");\n    this.saveState();\n  }\n\n  /**\n   * getCurrentQuestStatus – Retrieves the current status of the repeating quest.\n   * Now, instead of using a local boolean, the active flag is determined by comparing\n   * the universal active quest key with this quest's key.\n   * @returns {Promise<Object>} An object containing quest status information.\n   */\n  async getCurrentQuestStatus() {\n    const record = this.app.databaseManager.getQuestRecord(this.key);\n    const active = (StateManager.getActiveQuestKey() === this.key);\n    return {\n      key: this.key,\n      active: active,\n      finished: this.finished,\n      currentStage: this.currentStage,\n      totalStages: this.totalStages,\n      dbStatus: record ? record.status : \"not recorded\"\n    };\n  }\n\n  /**\n   * getRandomLetter – Utility function that returns a random letter from the ghost's name.\n   * @param {string} name - The ghost's name.\n   * @returns {string} A random letter from the name.\n   */\n  getRandomLetter(name) {\n    if (!name) return \"\";\n    const letters = name.replace(/[^A-Za-zА-Яа-яЁё]/g, '').split('');\n    if (!letters.length) return '';\n    return letters[Math.floor(Math.random() * letters.length)];\n  }\n\n  /**\n   * onObjectDetected – called when the AI model detects the current target.\n   * Enables the Shoot button in the UI.\n   */\n  onObjectDetected(event) {\n    const detectedClass = event.detail;\n    if (detectedClass === this.currentTarget && this.app.isCameraOpen) {\n      console.log(`[BaseRepeatingQuest] Detected '${detectedClass}', enabling Shoot button.`);\n      if (this.app.viewManager && typeof this.app.viewManager.setShootButtonActive === 'function') {\n        this.app.viewManager.setShootButtonActive(true);\n      }\n    }\n  }\n}"],"names":["PostRepeatingEvent","BaseRepeatingQuest","FinalEvent","detectableItems","ErrorManager","BaseEvent","constructor","eventManager","key","activate","isEventLogged","console","log","addDiaryEntry","error","logError","showError","text","isGhostPost","StateManager","appInstance","config","languageManager","app","set","KEYS","GAME_FINALIZED","visualEffectsManager","triggerGhostAppearanceEffect","ghostManager","finishCurrentGhost","viewManager","setPostButtonEnabled","questManager","syncQuestState","setActiveQuestKey","showNotification","document","dispatchEvent","CustomEvent","detail","dynamicKey","eventKey","ghost","getCurrentGhost","isFinished","triggerMirrorEffect","ImageUtils","doneKey","statusElementId","shootButtonId","totalStages","currentStage","activated","finished","finalRepeatingQuestCompleted","loadState","savedItems","get","remainingItems","JSON","parse","stringify","currentTarget","length","addEventListener","onObjectDetected","bind","generateDetectionConfig","target","saved","state","e","saveState","databaseManager","saveQuestRecord","quest_key","status","current_stage","total_stages","setCameraButtonActive","isCameraOpen","startCheckLoop","once","cameraSectionManager","startAIDetection","startRepeatingQuestUI","stage","onShoot","finishStage","quest","restoreUI","record","getQuestRecord","restoreButtonState","video","videoElement","srcObject","readyState","stopAIDetection","setShootButtonActive","photoData","captureSimplePhoto","shift","finishCompletely","remove","warn","canvas","createElement","width","videoWidth","height","videoHeight","ctx","getContext","drawImage","toDataURL","resetCycle","getCurrentQuestStatus","active","getActiveQuestKey","dbStatus","getRandomLetter","name","letters","replace","split","Math","floor","random","event","detectedClass"],"sourceRoot":""}