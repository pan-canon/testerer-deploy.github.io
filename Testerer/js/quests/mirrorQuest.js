import { BaseQuest } from './baseQuest.js';

export class MirrorQuest extends BaseQuest {
  /**
   * @param {EventManager} eventManager
   * @param {App} appInstance ‚Äì —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç App –¥–ª—è –≤—ã–∑–æ–≤–∞ compareCurrentFrame()
   */
  constructor(eventManager, appInstance) {
    super(eventManager);
    this.app = appInstance;
    this.key = "mirror_quest";
    this.doneKey = "mirror_done";
  }

  // –≠—Ñ—Ñ–µ–∫—Ç –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è
  triggerMirrorEffect() {
    console.log("üî• triggerMirrorEffect: –∑–∞–ø—É—Å–∫ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è");
    document.body.style.transition = "background 1s";
    document.body.style.background = "black";
    setTimeout(() => {
      document.body.style.background = "";
      console.log("üåü triggerMirrorEffect: —ç—Ñ—Ñ–µ–∫—Ç –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω");
    }, 1000);
    const staticNoise = new Audio('audio/phone_ringtone.mp3');
    staticNoise.play();
    console.log("üîä triggerMirrorEffect: –∑–≤—É–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —à—É–º–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è");
    setTimeout(() => {
      staticNoise.pause();
      console.log("üîá triggerMirrorEffect: –∑–≤—É–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —à—É–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }, 3000);
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è "–ü–æ–¥–æ–π—Ç–∏ –∫ –∑–µ—Ä–∫–∞–ª—É"
  showMirrorTask() {
    console.log("ü™û showMirrorTask: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è '–ü–æ–¥–æ–π—Ç–∏ –∫ –∑–µ—Ä–∫–∞–ª—É'");
    const mirrorTask = document.createElement("p");
    mirrorTask.textContent = this.app.languageManager.locales[this.app.languageManager.getLanguage()]["go_to_mirror"];
    mirrorTask.id = "mirror-task";
    document.getElementById("diary").appendChild(mirrorTask);
  }

  async checkStatus() {
    console.log("ü™û checkStatus: –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞");
    return new Promise(resolve => {
      setTimeout(async () => {
        console.log("‚è± checkStatus: –∑–∞–ø—É—Å–∫–∞–µ–º compareCurrentFrame() —á–µ—Ä–µ–∑ 3 —Å–µ–∫");
        const success = await this.app.compareCurrentFrame();
        console.log("‚è± checkStatus: —Ä–µ–∑—É–ª—å—Ç–∞—Ç compareCurrentFrame():", success);
        resolve(success);
      }, 3000);
    });
  }

  async finish() {
    console.log("ü™û finish: –∑–∞–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞ finish –¥–ª—è –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞");
    if (this.eventManager.isEventLogged(this.doneKey)) {
      console.log(`ü™û finish: –ö–≤–µ—Å—Ç "${this.key}" —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
      return;
    }
    const success = await this.checkStatus();
    if (success) {
      if (!this.eventManager.isEventLogged(this.doneKey)) {
        console.log("üìù finish: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞ —Å –∫–ª—é—á–æ–º", this.doneKey);
        await this.eventManager.addDiaryEntry(this.doneKey, this.app.lastMirrorPhoto);
        await this.eventManager.addDiaryEntry("what_was_it", this.app.lastMirrorPhoto);
      }
      this.showMirrorTask();
      alert("‚úÖ –ó–∞–¥–∞–Ω–∏–µ ¬´–ø–æ–¥–æ–π—Ç–∏ –∫ –∑–µ—Ä–∫–∞–ª—É¬ª –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!");
    } else {
      alert("‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!");
    }
  }
}
